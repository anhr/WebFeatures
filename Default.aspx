<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="Default.aspx.cs" Inherits="WelcomeToChat.Default" %>

<!DOCTYPE html>

<html>
<head>
    <meta name="author" content="Andrej Hristoliubov anhr@mail.ru">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

    <link rel="stylesheet" href="../MyIsapi/normal.css" type="text/css">
    <script type="text/javascript" src="/js/Common.js"></script>
    <script type="text/javascript" src="/js/QueryString.js"></script><!-- http://unixpapa.com/js/querystring.html -->
    <script type="text/javascript" src="../SignalRChat/Scripts/Chat.js"></script>

    <link rel="stylesheet" href="../MyIsapi/InputKeyFilter.css" type="text/css">
    <script type="text/javascript" src="/js/InputKeyFilter.js"></script>

    <!--Script references. -->
    <!--for IE5-->
    <script type='text/javascript' src="../SignalRChat/Scripts/json2.js"></script>
    <!--Reference the jQuery library. -->
    <script type='text/javascript' src="../SignalRChat/Scripts/jquery-1.6.4.js"></script>
    <!--Reference the SignalR library. -->
    <!--    ВНИМАНИЕ!!! Версия jquery.signalR-1.1.3.js не вызывает отключение пользователя от сервера при закрытии страницы.
        Как результать этот полльзователь остается а списке пользователей.
        Если снова зайти на сервер с этим именем, то в списке их будет несколько
        С версией (signalR-2.0.0.js) не работает отключение пользователя от сервера если пользователей больше 3
        по всей видимости зависает запрос на сервер в строке 7916:
            xhr.open( s.type, s.url, s.async );
        в файле
            Scripts/jquery-1.6.4.js
        для проверки зайти на сервер тремя пользователяим
        а затем щелкнуть на текущего пользователя в заголовке чата что бы перейти на страницу приглашения в чат http://localhost/chat/
        Кажется мне что это ограничение на число пользователей в IIS
        Этого ограничения нет в Server 2012R2
    -->
    <script type='text/javascript' src="../SignalRChat/Scripts/jquery.signalR-2.0.0.js"></script>
    <!--    <script type='text/javascript' src="Scripts/jquery.signalR-1.1.3.js"></script>-->
    <!--Reference the autogenerated SignalR hub script. -->
    <script type='text/javascript' src="../SignalRChat/signalr/hubs"></script>

</head>

<body
      style="background: #F0FCE8;">
<!--       onload="javascript: init();" -->
    <div class="transparent" id='Message'></div>
    <script type="text/javascript">var emailSubject = "Chat error";</script>
    <div id="openpage" class="center"><img src="../img/Wait.gif" alt="wait" /></div>
    <div id="center" class="center" style="visibility:hidden">
        <h1 id="pageTitle" align="center"></h1>
        <form action="../SignalRChat/">
            <table style="width:auto">
                <tbody>
                    <tr>
                        <td style="border:0px" align="right"><span id="nicknamePrompt"></span>:</td>
                        <td style="border:0px"><input name="Nickname" id="Nickname" onkeyup="javascript: onKeyupNickname(this.value)" autofocus /></td>
                    </tr>
                    <% if(IsEditProfile()) { %>
                    <tr>
                        <td style="border:0px"></td>
                        <td style="border:0px">
                            <input type="button" id="updatePrifile" onclick="javascript: onClickUpdateProfile()" />
                        </td>
                    </tr>
                    <tr style="border-top:1px solid black">
                    <% } else { %>
                    <tr>
                    <% } %>
                        <td style="border:0px" align="right"><span id="chatRoomPrompt"></span>:</td>
                        <td style="border:0px">
                            <input name="chatRoom" id="chatRoom" onkeyup="javascript: onKeyupChatRoom(this.value)" />
                            <input type="button" id="defaultChatRoom" onclick="javascript: getDefaultChatRoom()" />
                        </td>
                    </tr>
                    <tr>
                        <td style="border:0px"></td>
                        <td style="border:0px">
                            <input type="button" id="submit" onclick="javascript: return onClickSubmit()" />
                        </td>
                    </tr>
                </tbody>
            </table>
            <script>
                var g_submit = false;
                loadScript("lang/" + getLanguageCode() + ".js");
                var nicknamePrompt = document.getElementById("nicknamePrompt");

                var submit = document.getElementById("submit");
                if (isRussian()) {
                    nicknamePrompt.innerHTML = "Мой ник";
                    submit.value = "Войти";
                } else {
                    nicknamePrompt.innerHTML = "My nickname";
                    submit.value = "Enter";
                } 

                function onKeyupNickname(value) {
                    consoleLog("onKeyupNickname(" + value + ")");
                    g_user.nickname = value;
                    $.connection.chatHub.server.validNickname(JSON.stringify(g_user), document.getElementById("chatRoom").value);
                }

                function onKeyupChatRoom(value) {
                    consoleLog("onKeyupChatRoom(" + value + ")");
                    $.connection.chatHub.server.validNickname(JSON.stringify(g_user), value);
                }

                function onClickUpdateProfile() {
                    consoleLog("onClickUpdateProfile()");

                    //Nickname test
                    var elementInput = document.getElementById("Nickname");
                    var value = elementInput.value.replace(/^\s+/, "");
                    if (value == "") {
                        inputKeyFilter.TextAdd(isRussian() ?
                                "Введите Ваш ник"
                                : "Please type your nickname"
                            , elementInput);

                        elementInput.focus();
                        return false;
                    }

                    g_user.nickname = value;
                    $.connection.chatHub.server.updatePrifile(JSON.stringify(g_user));
                    return false;
                }

                function onClickSubmit() {
                    consoleLog("onClickSubmit()");

                    //Nickname test
                    var elementInput = document.getElementById("Nickname");
                    var value = elementInput.value.replace(/^\s+/, "");
                    if (value == "") {
                        inputKeyFilter.TextAdd(isRussian() ?
                                "Введите Ваш ник"
                                : "Please type your nickname"
                            , elementInput);

                        elementInput.focus();
                        return false;
                    }

                    //chatRoom test
                    elementInput = document.getElementById("chatRoom");
                    value = elementInput.value.replace(/^\s+/, "");
                    if (value == "") {
                        inputKeyFilter.TextAdd(lang.typeChatRoom, elementInput);//'Please type the name of the chat room'

                        elementInput.focus();
                        return false;
                    }
                    g_user.nickname = document.getElementById("Nickname").value;
//                    $.connection.chatHub.server.validNickname(JSON.stringify(g_user), value);
                    $.connection.chatHub.server.enterToChat(JSON.stringify(g_user), value);
                    g_submit = true;
                    return false;
                }
                function init() {
                    document.getElementById("chatRoomPrompt").innerHTML = lang.chatRoomPrompt;
                    document.getElementById("defaultChatRoom").value = lang.defaultString;

                    //http://unixpapa.com/js/querystring.html
                    var q = new QueryString();
                    g_user.id = q.value("userId");
                    if (g_user.id) {
                        $.connection.chatHub.server.getNickname(g_user.id);
                    } else {
                        var Nickname = q.value("Nickname");
                        if (Nickname)
                            document.getElementById("Nickname").value = Nickname;

                        var chatRoom = document.getElementById("chatRoom");
                        var chatRoomName = q.value("chatRoom");
                        if (chatRoomName)
                            chatRoom.value = chatRoomName;
                        else getDefaultChatRoom();
                        disable(false);
                    }

                    <% if(IsEditProfile()) { %>
                    document.title = lang.myProfile;//"My profile"
                    document.getElementById("updatePrifile").value = lang.updatePrifile;//"Update Profile"
                    <% } else { %>
                    document.title = lang.welcomeToChat;//"Welcome to chat"
                    <% } %>
                    document.getElementById("pageTitle").innerHTML = document.title;
                    
                }
                function getDefaultChatRoom() { return document.getElementById("chatRoom").value = "Chat"; }

                //<!--Add script to update the page and send messages.-->
                $(function () {
                    try {
                        // Declare a proxy to reference the hub.
                        var chat = $.connection.chatHub;
                        
                        chat.client.onNicknameBusy = function () {
                            var message = lang.nicknameIsBusy//nickname is busy
                            consoleLog(message);
                            var elementInput = document.getElementById("Nickname");
                            inputKeyFilter.TextAdd(message, elementInput, "downarrowdivred");
                            elementInput.focus();
                            g_submit = false;
                        }

                        chat.client.onDuplicateUserNameInRoom = function () {
                            var elementChatRoom = document.getElementById("chatRoom");
/*
                            var message = lang.duplicateUsernameInRoom.replace("%s", document.getElementById("Nickname").value);//The duplicate "%s" username in "%s2" the room
                            message = message.replace("%s2", elementChatRoom.value);
*/
                            var message = lang.duplicateUsernameInRoom.replace("%s", elementChatRoom.value);//The duplicate "%s" username in "%s2" the room
                            consoleLog(message);
                            inputKeyFilter.TextAdd(message, elementChatRoom, "downarrowdivred");
                            elementChatRoom.focus();
                            g_submit = false;
                        }

                        chat.client.onNicknameOK = function () {
                            consoleLog("nickname ok");

                            if (!g_submit)
                                return;

                            var user;
                            if (typeof g_user.id == 'undefined')
                                user = "Nickname=" + encodeURIComponent(document.getElementById("Nickname").value);
                            else user = "userId=" + g_user.id;

                            var origin = null;
                            if (typeof window.location.origin != 'undefined')
                                origin = window.location.origin;
                            else if ((typeof window.location.protocol != 'undefined') && (typeof window.location.hostname != 'undefined'))
                                origin = window.location.protocol + "//" + window.location.hostname;
                            else origin = "../";
                            if ((typeof origin == 'undefined') || (origin == null)) {
                                ErrorMessage("chat.client.onNicknameOK() failed! origin = " + origin);
                                return;
                            }
                            window.location = origin + "/SignalRChat?" + user + '&chatRoom=' + encodeURIComponent(document.getElementById("chatRoom").value);
//                            window.location = "../SignalRChat?" + user + '&chatRoom=' + encodeURIComponent(document.getElementById("chatRoom").value);
                        }

                        chat.client.onNickname = function (nickname) {
                            consoleLog("nickname: " + nickname);
                            if (nickname) {
                                document.getElementById("Nickname").value = nickname;
                                disable(false);
                            } else {
                                g_user.id = undefined;
                                alert(lang.profileNotExist);//"Your profile does not exist. Please create a new profile.");
                                gotoChatPage();
                            }
                        }

                        chat.client.onUpdatePrifileOK = function () {
                            consoleLog("onUpdatePrifileOK()");
                            inputKeyFilter.TextAdd(lang.updatePrifileOK//The profile has been updated successfully
                                , document.getElementById("updatePrifile"));
                        }

                        chat.client.onError = function (error) {
                            ErrorMessage('SignalR onError: ' + error)
                        }

                        //http://www.asp.net/signalr/overview/guide-to-the-api/hubs-api-guide-javascript-client#connectionlifetime
                        //SignalR provides the following connection lifetime events that you can handle:
                        $.connection.hub.starting(function () {
                            consoleLog('SignalR starting: Raised before any data is sent over the connection.');
                        });
                        $.connection.hub.received(function () {
                            consoleLog('SignalR received: Raised when any data is received on the connection. Provides the received data.');
                        });
                        $.connection.hub.connectionSlow(function () {
                            consoleLog('SignalR connectionSlow: We are currently experiencing difficulties with the connection.');
                        });
                        $.connection.hub.reconnecting(function () {
                            consoleLog('SignalR reconnecting: Raised when the underlying transport begins reconnecting.');
                            beep();
                            disable(true);
                        });
                        $.connection.hub.reconnected(function () {
                            consoleLog('SignalR reconnected: Raised when the underlying transport has reconnected.');
                            disable(false);
                        });
                        $.connection.hub.stateChanged(function (state) {
                            //http://stackoverflow.com/questions/9334838/signalr-detect-connection-state-on-client
                            var stateConversion = { 0: 'connecting', 1: 'connected', 2: 'reconnecting', 4: 'disconnected' };
                            consoleLog('SignalR state changed from: ' + stateConversion[state.oldState]
                             + ' to: ' + stateConversion[state.newState]);

                            function stateMessage(state) {
                                var message = "";
                                switch (state) {
                                    case 0://connecting
                                        message = (isRussian() ? "Соединение" : "Сonnecting") + "...";
                                        break;
                                    case 1://connected
                                        message = "";
                                        init();
                                        break;
                                    case 2://reconnecting
                                        message = '<img src="../img/Wait.gif" style="width:20px; height:20px;" alt="wait" />  ' +
                                            (isRussian() ? "Восстановление соединения" : "Reconnecting") + "...";
                                        break;
                                    case 4://disconnected
                                        message = (isRussian() ? "Потеря соединения" : "Disconnected")
                                            + "... <input type='button' value='" + (isRussian() ? "Cоедениться снова" : "Connect again") + "' onclick='javascript: return onConnectAgain()' />";
                                        break;
                                    default:
                                        ErrorMessage("Unknown SignalR state: " + state);
                                        return;
                                }
                                MessageElement(message);
                            }
                            stateMessage(state.newState);
                        });
                        $.connection.hub.disconnected(function () {
                            consoleLog('SignalR disconnected: Raised when the connection has disconnected.');
                        });
                        $.connection.hub.error(function (error) {
                            consoleError('SignalR error: ' + error)
                        });

                        //To enable client-side logging on a connection,
                        //set the logging property on the connection object before you call the start method to establish the connection.
                        //$.connection.hub.logging = true;

                        // Start the connection.
                        $.connection.hub.start().done(function () {
                        });
                    } catch (e) {
                        ErrorMessage(e.message);
                    }
                });
                function onConnectAgain() {
                    //consoleLog("onConnectAgain()");
                    location.reload();
                }
                function disable(isDisable) {
                    
                    var visibilityCenter;
                    var visibilityOpenpage;
                    if (isDisable) {
                        visibilityCenter = "hidden";
                        visibilityOpenpage = "visible";
                    } else {
                        visibilityCenter = "visible";
                        visibilityOpenpage = "hidden";
                    }
                    document.getElementById("center").style.visibility = visibilityCenter;
                    document.getElementById("openpage").style.visibility = visibilityOpenpage;
/*

                    document.getElementById("Nickname").disabled = isDisable;
                    document.getElementById("chatRoom").disabled = isDisable;
                    document.getElementById("defaultChatRoom").disabled = isDisable;
                    document.getElementById("submit").disabled = isDisable;
*/
                    <% if(IsEditProfile()) { %>
//                    document.getElementById("updatePrifile").disabled = isDisable;
                    <% } %>
                }
            </script>
        </form>
    </div>
</body>
</html>