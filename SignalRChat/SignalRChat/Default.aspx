<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="Default.aspx.cs" Inherits="SignalRChat.Default" %>
<%@ import namespace="System.Data" %>
<%@ import namespace="System.Data.SqlClient" %>

<!DOCTYPE html>
<html>
<head>
    <title>Chat</title>
    <meta name="author" content="Andrej Hristoliubov anhr@mail.ru">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

    <link rel="stylesheet" href="../MyIsapi/normal.css" type="text/css">
    <script type="text/javascript" src="/js/Common.js"></script>
    <script type="text/javascript" src="/js/resizer.js"></script>
    <script type="text/javascript" src="/js/myRequest.js"></script>
    <script type="text/javascript" src="/js/QueryString.js"></script><!-- http://unixpapa.com/js/querystring.html -->
    <link rel="stylesheet" href="../MyIsapi/gradient.css" type="text/css" />
    <script type="text/javascript" src="Scripts/Chat.js"></script>
    <link rel="stylesheet" href="../MyIsapi/style.css" type="text/css" /><!-- context menu -->
    
    <!--http://ckeditor.com/download -->
    <link rel="stylesheet" href="/ckeditor/contents.css" type="text/css" />

    <link rel="stylesheet" href="../MyIsapi/InputKeyFilter.css" type="text/css">
    <script type="text/javascript" src="/js/InputKeyFilter.js"></script>

    <!--Script references. -->
    <!--for IE5-->
    <script type='text/javascript' src="Scripts/json2.js"></script>
    <!--Reference the jQuery library. -->
    <script type='text/javascript' src="Scripts/jquery-1.6.4.js"></script>
    <!--Reference the SignalR library. -->
    <!--    ВНИМАНИЕ!!! Версия jquery.signalR-1.1.3.js не вызывает отключение пользователя от сервера при закрытии страницы.
        Как результать этот полльзователь остается а списке пользователей.
        Если снова зайти на сервер с этим именем, то в списке их будет несколько
        С версией (signalR-2.0.0.js) не работает отключение пользователя от сервера если пользователей больше 3
        по всей видимости зависает запрос на сервер в строке 7916:
            xhr.open( s.type, s.url, s.async );
        в файле
            Scripts/jquery-1.6.4.js
        для проверки зайти на сервер тремя пользователяим
        а затем щелкнуть на текущего пользователя в заголовке чата что бы перейти на страницу приглашения в чат http://localhost/chat/
        Кажется мне что это ограничение на число пользователей в IIS
        Этого ограничения нет в Server 2012R2
    -->
    <script type='text/javascript' src="Scripts/jquery.signalR-2.0.0.js"></script>
    <!--    <script type='text/javascript' src="Scripts/jquery.signalR-1.1.3.js"></script>-->

    <!--Reference the autogenerated SignalR hub script. -->
    <script type='text/javascript' src="signalr/hubs"></script>

    <!--ckeditor http://ckeditor.com/ -->
    <script src="../ckeditor/ckeditor.js"></script>
    <script src="../ckeditor/samples/js/sample.js"></script>

    <!-- for edge http://stackoverflow.com/questions/36824585/does-rtcpeerconnection-work-in-microsoft-edge -->
<!--    <script src="https://webrtc.github.io/adapter/adapter-latest.js"></script> -->

    <script src="/JS/WebRTC/DetectRTC.js"> </script><!--этот скрипт надо выполнить перед PeerConnection.js потому что там совпадают имена некоторые переменных: navigator.getUserMedia -->
<!--<script src="Scripts/WebRTC/111.js"> </script>
<script src="Scripts/WebRTC/chatclient.js"> </script>
<script src="Scripts/WebRTC/adapter.js"> </script>-->

    <style>
        .gradient_header
	        {/*http://htmlbook.ru/css3-na-primerakh/lineinyi-gradient     */
		        border-bottom: 2px solid #999999;
		        background: #cccccc; /* Для старых браузров */
		        background: -moz-linear-gradient(top, #cccccc, #FFFFFF); /* Firefox 3.6+ */
		        /* Chrome 1-9, Safari 4-5 */
		        background: -webkit-gradient(linear, left top, left bottom, 
					        color-stop(0%,#cccccc), color-stop(100%,#FFFFFF));
		        /* Chrome 10+, Safari 5.1+ */
		        background: -webkit-linear-gradient(top, #cccccc, #FFFFFF);
		        background: -o-linear-gradient(top, #cccccc, #FFFFFF); /* Opera 11.10+ */
		        background: -ms-linear-gradient(top, #cccccc, #FFFFFF); /* IE10 */
		        background: linear-gradient(top, #cccccc, #FFFFFF); /* CSS3 */ 
		        /*filter: progid:DXImageTransform.Microsoft.Gradient(startColorStr='#cccccc', endColorStr='#FFFFFF', gradientType='0');*//*IE Error: I do not see borders in the table headers*/
		        padding: .3em;
		        -moz-border-radius: 5px;/* Firefox */
		        -webkit-border-radius: 5px;/* Safari 4 */
		        border-radius: 5px;/* IE 9, Safari 5, Chrome */
	        }
        .message {
            display: none;
        }

        /*http://starper55plys.ru/css/otdelnye-bloki/ */
        .blok_hide {
            margin: 0px;
            padding: 0px;
            /*border: 1px solid #999999;*/
        }

        .blok_top {
            margin: 1px 3px 3px 3px;
        }

        .blok_shadow {
            padding: 5px;
            background: #F0FCE8;
            border-radius: 4px;
            box-shadow: rgba(0,0,0,1.2) 0px 1px 3px;
        }

        .blok_bottom {
            margin: 1px 3px 3px 3px;
        }

        .branch {
            margin-left:10px;
            margin-top:5px;
        }

        .sendButton {
            float: right;
	        padding:5px;
	        cursor: pointer;
        }
        .sendButton:hover {
	        background: #cccccc;
	        background: -moz-linear-gradient(top, #cccccc, #FFFFFF);
	        background: -webkit-gradient(linear, left top, left bottom, 
				        color-stop(0%,#cccccc), color-stop(100%,#FFFFFF));
	        background: -webkit-linear-gradient(top, #cccccc, #FFFFFF);
	        background: -o-linear-gradient(top, #cccccc, #FFFFFF);
	        background: -ms-linear-gradient(top, #cccccc, #FFFFFF);
	        background: linear-gradient(top, #cccccc, #FFFFFF);
	        -moz-border-radius: 5px;
	        -webkit-border-radius: 5px;
	        border-radius: 5px;
        }
        .video {
            /*padding:5px;*/
            margin-top:5px;
            overflow:auto;
        }
    </style>

    <script type="text/javascript">
        var fatalError = false;
        var boBodyFocus = true;
        function onresize() {
		    if (fatalError)
		        return;
		    if(isIE && (ieVersion == 6)){
		        loadScript("lang/" + getLanguageCode() + ".js", function() { 
		            alert(lang.ie6notCompatible);//Your Internet Explorer 6 browser is not compatible with our web page
		        });
		        fatalError = true;
		    }
		    var elementMessage = document.getElementById("editor");
	        var elementChat = document.getElementById("messages");
	        var elementUsers = document.getElementById("users");
	        var usersWidthMin = document.body.clientWidth - 100;
	        if(elementUsers.clientWidth > usersWidthMin)
	            elementUsers.style.width = usersWidthMin + "px";
		    var elementSendHide = document.getElementById("send_hide");
		    var elementSendHideoffsetTop = document.body.clientHeight - elementSendHide.clientHeight;//elementSendHide.offsetTop;//for compability with IE5
		    var elementChatUsers = document.getElementById("chatUsers");
		    var height = elementSendHideoffsetTop - elementChatUsers.offsetTop - 18;
		    if (height < 100)
		        height = 100;
		    height += 'px'
		    elementUsers.style.height = height;
		    elementChat.style.height = height;
		    document.getElementById("resizerUsers").style.height = height;

            //For compatibility with IE6 
		    elementMessage.style.width = elementSendHide.clientWidth - document.getElementById("send").clientWidth - 50 + 'px';
		}

        function AddSmile(object, smile, title) {
            if(!object)
                return;
            if(!title)
                title = "";

            var image;
            switch(smile){
                case '😀':
                    image = "regular_smile.gif";
                    break;
                case '😕':
                    image = "sad_smile.gif";
                    break;
                case '😡':
                    image = "angry_smile.gif";
                    break;
                default:
                    consoleError("Add " + smile + " smile failed!");
                    object.innerHTML = title;
                    return;
            }

            object.innerHTML = '<img src="../../../ckeditor/plugins/smiley/images/' + image + '" alt="" title="' + title + '">';
        }
    </script>

</head>
<!--    onresize="javascript: onresize();" Do not works in IE6
    onclick="javascript: onclickBody(event);
    -->
<body "
    onresize="javascript: onresize();"
    onbeforeunload="return onbeforeunload()"
    style="margin: 0px; padding:0px;"
    class="gradient"
>
<!-- onload="javascript: init();" -->
    <div id='ScriptProblem' style='background: white; '><FONT style='color: red; background-color: white'>WARNING: Active Scripting in your internet browser is disabled. Refresh your Web page to find out the current status of your Web page or enable Active Scripting.</FONT></div>
    <script type='text/javascript'>
        var ScriptProblem = document.getElementById('ScriptProblem');
        if (ScriptProblem == null)
            alert('ERROR: ScriptProblem == null');
        else {
            ScriptProblem.innerHTML = '';
            ScriptProblem.style.display = 'none';
        }
    </script>

    <div class="center message blok" style="height: 20%; overflow:auto;" id='Message'></div>
    <script type="text/javascript">
        var emailSubject = "Chat error";
        
        loadScript("lang/" + getLanguageCode() + ".js", function() { 
            var invitationsHeader = document.getElementById("invitationsHeader");
            invitationsHeader.innerHTML = lang.queries;//Queries
            invitationsHeader.title = lang.queriesTitle;//The list of queries to you from visitors of the chat

            document.getElementById("noInvitations").innerHTML = lang.noInvitations;//"No invitations"

        });

    </script>

    <div id="openpage" class="center"><img src="../img/Wait.gif" alt="wait" /></div>

    <div id="chatbody" style="visibility:hidden;">
        <div style="overflow: auto;"><!--for firefox 41.0.1 --> 
            <h1 id="title" style="margin: 0px; padding: 5px; float:left;"></h1>
	        <ul onmouseover="javascript: openContextMenuUsers()" onmouseout="javascript: closeContextMenuUsers()" style="float:right; list-style:none; margin:-5px 0 0 5px; padding:0;">
		        <li>
                    <h1 class="menu" id="menuUsers"></h1>
                    <table id="contextMenuUsers" class="contextMenu closeContextMenu">
		                <tr class="contextMenuItem" onclick="onclickCreateSessionCamera()">
			                <td class="contextMenuItemLeft">📹</td>
			                <td class="contextMenuItemRight" id="broadcastVideoText"></td>
		                </tr>
		                <tr class="contextMenuItem" onclick="onclickCreateSessionMicrophone()">
			                <td class="contextMenuItemLeft">🎤</td>
			                <td class="contextMenuItemRight" id="broadcastMicrophoneText"></td>
		                </tr>
		                <tr class="contextMenuItem" onclick="onclickSendFile()">
			                <td class="contextMenuItemLeft">📁</td>
			                <td class="contextMenuItemRight" id="sendFileText"></td>
		                </tr>
		                <tr class="contextMenuItem" onclick="onclickSendPicture()">
			                <td class="contextMenuItemLeft">🖼</td><!--⌗-->
			                <td class="contextMenuItemRight" id="sendFilePictureText"></td>
		                </tr>
		                <tr class="contextMenuItem" onclick="onclickSendVideo()">
			                <td class="contextMenuItemLeft">📽</td><!--📼-->
			                <td class="contextMenuItemRight" id="sendFileVideoText"></td>
		                </tr>
		                <tr class="contextMenuItem" onclick="onclickSendAudio()">
			                <td class="contextMenuItemLeft">📢</td><!--🖭✇-->
			                <td class="contextMenuItemRight" id="sendFileAudioText"></td>
		                </tr>
    <!--
		                <tr class="contextMenuItem" onclick="onclickCreateSessionScreen()">
			                <td class="contextMenuItemLeft">🖵</td>
			                <td class="contextMenuItemRight" id="captureScreenText"></td>
		                </tr>
    -->
		                <tr class="contextMenuItem" onclick="window.history.back()" style="border-top:black 1px solid">
			                <td class="contextMenuItemLeft">🚪</td>
			                <td class="contextMenuItemRight" id="sendExitText"></td>
		                </tr>
                    </table>
		        </li>
	        </ul>
        </div>

        <div id="chatUsers" class="blok_hide2" style="width:100%; padding:0px; overflow:auto;">
            <div id="users" class="blok_top blok_shadow" style="width:15%; float: right; overflow:auto;">

                <div id="invitations" style="display:none">
                    <a href="#" onclick="javascript: onclickInvitations()">
                        <h1>
                            <span id="branchInvitations">▶</span>
                            <span id="invitationsHeader"></span>
                            <span>: </span>
                            <span id="invitationsCount"></span>
                            <img id="blinkInvitations" src="../img/BlinkQuad.gif" style="width:12px; height:12px" alt="">
                        </h1>
                    </a>
                    <div id="informerInvitations" class="b-toggle" style="margin-top:5px;">
                        <div id="noInvitations"></div>
                    </div>
                </div>
<!--
                <div id="videos" style="display:none">
                    <a href="#" onclick="javascript: onclickVideos()">
                        <h1>
                            <span id="branchVideos">▶</span>
                            <span id="videosHeader"></span>
                            <span>: </span>
                            <span id="videosCount"></span>
                        </h1>
                    </a>
                    <div id="informerVideos" class="b-toggle" style="margin-top:5px;">
                        <div id="noVideos"></div>
                    </div>
                </div>
-->
                <div id="microphones" style="display:none">
                    <a href="#" onclick="javascript: onclickMicrophones()">
                        <h1>
                            <span id="branchMicrophones">▶</span>
                            <span id="microphoneHeader"></span>
                            <span>: </span>
                            <span id="microphonesCount"></span>
                        </h1>
                    </a>
                    <div id="informerMicrophones" class="b-toggle" style="margin-top:5px;">
                        <div id="noMicrophones"></div>
                    </div>
                </div>
<!--
                <div id="fileTransfers" style="display:none">
                    <a href="#" onclick="javascript: onclickFileTransfers()">
                        <h1>
                            <span id="branchFileTransfers">▶</span>
                            <span id="fileTransferHeader"></span>
                            <span>: </span>
                            <span id="fileTransfersCount"></span>
                        </h1>
                    </a>
                    <div id="informerFileTransfers" class="b-toggle" style="margin-top:5px;">
                        <div id="noFileTransfer"></div>
                    </div>
                </div>
-->
                <div id="rooms">
                    <a href="#" onclick="javascript: onclickRooms()">
                        <h1>
                            <span id="branchRooms">▶</span>
                            <span id="roomsHeader"></span>
                            <span>: </span>
                            <span id="roomsCount"></span>
                        </h1>
                    </a>
                    <form id="form1" runat="server">
<!--                        <div id="roomsList" class="b-toggle" style="margin-top:5px;">-->
                        <div id="roomsList" style="margin-top:5px;display:none">
                            <asp:ListView ID="RoomsListView" runat="server" DataKeyNames="RoomNameCount" DataSourceID="SqlDataSourceRooms">
                                <ItemTemplate>
                                    <% //ATTENTION!!! Do not divide line below to several lines. Also see createElementRoom() function%>
                                    <div name="itemRoom"><span class="triangle">▶</span><span class="pointer" onclick="javascript: onclickItemRoom(event)"><%# Eval("RoomName") %></span><span style="float: right"><%# Eval("RoomNameCount") %></span></div>
                                </ItemTemplate>
                            </asp:ListView>
                            <asp:SqlDataSource
                                ID="SqlDataSourceRooms"
                                runat="server"
                                ConnectionString="Data Source=.\SQLEXPRESS;Initial Catalog=DBChat;Integrated Security=True"
                                ProviderName="System.Data.SqlClient"
                                >
                            </asp:SqlDataSource>
                        </div>
                    </form>
                </div>
                <script type="text/javascript">
                    function onclickRooms() {
                        consoleLog("onclickRooms()");
                        return onbranchFast('roomsList', 'branchRooms');
                    };

                    function onClickGoToRoom(e) {
                        if (!e) e = window.event;
                        var elementGoToRoom = e.target || e.srcElement;
                        consoleLog("onClickGoToRoom(" + elementGoToRoom + ")");

                        var roomName = elementGoToRoom.parentElement.parentElement.roomName;

                        //ATTENTION!!! do not use browserID instead of UserBrowserID because browserID is reserved param
                        var response = getSynchronousResponse("XMLHttpRequest.aspx?isVisitingRoom=" + encodeURIComponent(roomName) + "&UserBrowserID=" + g_user.browserID);
                        switch(response)
                        {
                            case "0": {
                                consoleLog('You can vizit into "' + roomName + '" room.');
                                //Открыть новую вкладку браузера можно только тут
                                window.open(getOrigin() + "/SignalRChat?browserID=" + g_user.browserID + "&chatRoom=" + encodeURIComponent(roomName), '_blank');
                                //                        window.open(getOrigin() + "/SignalRChat?userId=" + g_user.id + "&chatRoom=" + encodeURIComponent(roomName), '_blank');
                                return;
                            }
                            case "1":{
                                var message = lang.duplicateUsernameInRoom.replace("%s", roomName);//You are already in the "%s" room
                                consoleLog(message);
                                inputKeyFilter.TextAdd(message, elementGoToRoom, "downarrowdivred");
                                return;
                            }
                            default: consoleError("Response: " + response);
                        }
                    }

                    function openRoomBranch(itemRoom) {
                        consoleLog("openRoomBranch(" + itemRoom + ")");

                        if((itemRoom.className != "pointer") || (itemRoom.tagName != "SPAN")){
                            consoleError("openRoomBranch(" + itemRoom + ") failed! invalid itemRoom");
                            return;
                        }

                        var roomName = itemRoom.innerHTML;
                        var elementParent = itemRoom.parentElement;
                        var triangle = '▼';

                        if(getElementByClassName(elementParent, "elementRoom") == null)
                        {
                            //добавляем окно комнаты
                            consoleLog('Ctreate elementRoom: "' + roomName + '"');

                            var element = document.createElement("div");
                            element.className = "elementRoom b-toggle expanded";
                            element.roomName = roomName;
                            element.innerHTML = 
                                  '<div class="branch gradient_gray">'
                                + ' <input type="button" onclick="javascript: onClickGoToRoom(event)"'
                                  +     ' title="' + lang.gotoRoom.replace("%s", roomName) + '"'//'Go to "%s" room'
                                + '     value=' + lang.go//'Go'
//                                + '     roomName=' + roomName
                                + ' />'
                                + ' <hr>'
                                + ' <h2 style="margin-top:5px;" title="' + lang.roomUsers.replace("%s", roomName) + '">' + lang.users + '</h2>'
                                + ' <div id="Users' + roomName + '" class="branch"></div>'
                                + '</div>'
                            ;
                            elementParent.appendChild(element);
                            $.connection.chatHub.server.getRoomUsers(roomName);
                        } else {
                            //var element = elementParent.getElementsByClassName("elementUser")[0].childNodes[0];Do not support by IE 8
                            var element = getElementByClassName(elementParent, 'elementRoom');
                            var expanded = ' expanded';
                            if (element.className.indexOf(expanded) == -1)
                                element.className += " expanded";//показать окно комнаты
                            else {
                                element.className = element.className.replace(expanded, '');//скрыть окно комнаты
                                triangle = '▶';
                            }
                        }
                        //elementChatUsers.getElementsByClassName('triangle')[0].innerText = triangle;Do not support by IE 8
                        getElementByClassName(elementParent, 'triangle').innerText = triangle;
                    }

                    function onclickItemRoom(e) {
                        if (!e) e = window.event;

                        //http://javascript.ru/forum/events/28424-kak-otmenit-sobytie-roditelya.html
                        e.cancelBubble = true;

                        openRoomBranch(e.target || e.srcElement);
                    }
                </script>

                <h1>▼<span id="usersHeader"></span><span id="usersCount" style="float: right"></span></h1>
                <div id="chatusers"></div>
            </div>

            <!-- resize the mesages and users elements http://jsfiddle.net/3jMQD/ 
                http://stackoverflow.com/questions/8960193/how-to-make-html-element-resizable-using-pure-javascript
            -->
            <div id="resizerUsers" style="width: 5px; float: right;"></div>
            <script type='text/javascript'>
                function resizeVideos(){
                    var elementUsers = document.getElementById('users');
/*сейчас ширина video и audio равна ширине родителя и определяется style="width:inherit"
                    loadScript("Scripts/WebRTC/Media.js", function (){
                        var videos = elementUsers.querySelectorAll('video');
                        for(i = 0; i < videos.length; i++)
                            setVideoContainerWidth(videos[i]);
                    });
*/
                    //consoleLog('resizeVideos()');
                    var fileTransferContainers = document.getElementsByName("fileTransferContainer");
                    for(i = 0; i < fileTransferContainers.length; i++)
                        setFileTransferContainerWidth(fileTransferContainers[i]);

                    //maps
//                    if (typeof google != 'undefined')
                    if (typeof ymaps != 'undefined')
                    {
                        var mapContainers = document.querySelectorAll('#mapContainer');
                        for(mapIndex = 0; mapIndex < mapContainers.length; mapIndex++){
                            var mapContainer = mapContainers[mapIndex];
                            mapContainer.style.height = mapContainer.clientWidth + 'px';
                            if (typeof mapContainer.map == 'undefined')
                                continue;
                            //https://tech.yandex.ru/maps/jsbox/2.1/fillcontainer
                            mapContainer.map.container.fitToViewport();
                            /*
                            google.maps.event.trigger(mapContainer.map, "resize");
                            mapContainer.map.setCenter(new google.maps.LatLng(mapContainer.position.coords.latitude,mapContainer.position.coords.longitude));
                            */
                        }
                    }
                }

                resizerX("resizerUsers", function (e) {
                    //consoleLog("mousemove(X = " + e.pageX + ")");
                    var elementUsers = document.getElementById("users");
                    var usersWidth = elementUsers.parentElement.clientWidth - e.pageX - 18 + "px";
                    elementUsers.style.width = usersWidth;
                    SetCookie("usersWidth", usersWidth);
                    resizeVideos();
                });
            </script>

            <div id="messages" class="blok_top blok_shadow" style="overflow:auto;"></div>
        </div>
        <div id="send_hide" class="blok_hide" style="width: 100%; overflow:auto; position: fixed; left: 0; bottom: 0;">
            <div id="blok_bottom" class="blok_bottom blok_shadow">
                <h1 id="toolbarButton" class="sendButton" onclick="javascript: onClickToolbarButton()">△</h1>
                <h1 id="smilesButton" class="sendButton" onclick="javascript: onClickSmilesButton()">:)</h1>
                <h1 id="send" class="sendButton">📨</h1>
<!--                <input type="button" id="send" style="float: right;" /> -->
                <div style="overflow:auto; padding:4px;">
                    <textarea id="editor" style="width:auto; float:left;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <script type='text/javascript'>
        var send = document.getElementById("send");
        send.value = isRussian() ? "Отправить" : "Send";
        function getToolbar() { return document.getElementById("cke_1_top");}
        function getToolbars() { return CKEDITOR.instances.editor.toolbox.toolbars;}
        function isToolbarHide() {
            //The getElementsByClassName is not compatible with IE5
            //return document.getElementsByClassName("cke_toolbar")[0].style.display == "none";
            return document.getElementById(getToolbars()[0].id).style.display == "none";
        }

        function getVideoBlock(videoID) {
            return document.getElementById(getVideoBlockID(videoID));
        }

        function getMicrophoneBlock(microphoneID) {
            return document.getElementById(getMicrophoneBlockID(microphoneID));
        }

        function getCameraBlock(videoID) {
            return getVideoBlock(getCameraID(videoID));
//            return document.getElementById(videoID + "VideoBlock");
        }

        function getScreenBlock(videoID) {
            return getVideoBlock(getScreenID(videoID));
//            return document.getElementById(videoID + "ScreenBlock");
        }

        function getVideoBlockID(videoID) {
            if((videoID.indexOf('Camera') == -1) && (videoID.indexOf('Screen') == -1) && (videoID.indexOf('Microphone') == -1) && (videoID.indexOf('SendFile') == -1)){
                consoleError('getVideoBlockID(' + videoID + ') failed!');
            }
            return videoID + "Block";
        }

        function getMicrophoneBlockID(microphoneID) {
            if((microphoneID.indexOf('Camera') == -1) && (microphoneID.indexOf('Screen') == -1) && (microphoneID.indexOf('Microphone') == -1)){
                consoleError('getMicrophoneBlockID(' + microphoneID + ') failed!');
            }
//            return microphoneID + "MicrophoneBlock";
            return microphoneID + "Block";
        }

        function getCameraID(videoID) {
            if (videoID.length != 36) {
                consoleError('getCameraID(' + videoID + ') failed! videoID.length = ' + videoID.length);
                return;
            }
            return videoID + 'sendCamera';//'Camera';
        }

        function getMicrophoneID(microphoneID) {
            if (microphoneID.length != 36) {
                consoleError('getMicrophoneID(' + microphoneID + ') failed! microphoneID.length = ' + microphoneID.length);
                return;
            }
            return microphoneID + 'sendMicrophone';//'Microphone';
        }

        function getScreenID(videoID) {
            if (videoID.length != 36) {
                consoleError('getScreenID(' + videoID + ') failed! videoID.length = ' + videoID.length);
                return;
            }
            return videoID + "Screen";
        }
/*
        function getFileTransferID(fileTransferID) {
            if (fileTransferID.length != 36) {
                consoleError('getFileTransferID(' + fileTransferID + ') failed! fileTransferID.length = ' + fileTransferID.length);
                return;
            }
            return fileTransferID + 'FileTransfer';
        }
*/
        function getSessionId(){ return Math.floor((Math.random() * 900000) + 100000).toString()}

        function isCameraID(videoID) {
            return videoID.indexOf('Camera') != -1;
        }

        function isMicrophoneID(microphoneID) {
            return microphoneID.indexOf('Microphone') != -1;
        }

        function isScreenID(videoID) {
            return videoID.indexOf('Screen') != -1;
        }
        function getAudioFromContainer(elementContainer) {
            var elementAudio = elementContainer.querySelector('audio');
            if(!elementAudio){
                var elementMicrophone = getMicrophoneBlock(elementContainer.id.replace('Container', ''));
                if((typeof elementMicrophone.addMedia != "undefined") && elementMicrophone.addMedia.app.useLocalMedia)
                    return null;//Не создавать локальный аудиопроигрыватель 
                elementAudio = document.createElement('audio');
                elementContainer.appendChild(elementAudio);
            }
            return elementAudio;
        }
        function getAudio(audioID) {
            return getAudioFromContainer(document.getElementById(getContainerID(audioID)));
        }
        function isBroadcastCamera() {
            return document.getElementById('SendCamera');
        }

        function isBroadcastMicrophone() {
            return document.getElementById('SendMicrophone');
        }

        function isBroadcastScreen() {
            return getVideoBlock(getScreenID(g_user.id)) != null;
        }

        function toggleMenuItems() {
            if(isBroadcastCamera()){
                broadcastVideoText.innerHTML = lang.stopBroadcastVideo;//Video camera off'
            }else{
                broadcastVideoText.innerHTML = lang.broadcastVideo;//"Video camera on";
            }

            if(isBroadcastMicrophone()){
                broadcastMicrophoneText.innerHTML = lang.stopBroadcastMicrophone;//Microphone off'
            }else{
                broadcastMicrophoneText.innerHTML = lang.broadcastMicrophone;//"Microphone on";
            }
        }

        function displayWaitElement(element, boDisplay) {
            if(!element)
                return;//иногда сюда попадает когда закрывается трансляция и у нее несколько зрителей
            var display;
            if (boDisplay)
                display = 'block';
            else display = 'none';
            element.style.display = display;
        }

        function displayWait(elementID, boDisplay) {
            displayWaitElement(document.getElementById(elementID + "Wait"), boDisplay);
        }

        function download(url, fileName, noRevokeURL){
            try{
                var a = document.createElement('a');
                a.style.display = 'none';
                a.href = url;
                a.download = fileName;
                document.body.appendChild(a);
                a.click();
                setTimeout(function () {
                    consoleLog('window.URL.revokeObjectURL(url)');
                    document.body.removeChild(a);
                    if(!noRevokeURL)
                        window.URL.revokeObjectURL(url);
                }, 10000);//большая задержка нужна для скачивания больших фотографий
            } catch (e){
                consoleError('download(...) failed! ' + e);
            }
        }

        function sendBase(callback){
            //            consoleLog('sendBase()');
            if(!DetectRTC.isWebRTCSupported){//for Safari
                alert(lang.uncompatibleBrowser.replace("%s", 'DetectRTC.isWebRTCSupported = ' + DetectRTC.isWebRTCSupported));//'Your web browser is not compatible with your web site.\n\n%s\n\n Please use Google Chrome or Mozilla Firefox or Opera web browser.';
                return;
            }
            loadScript("Scripts/WebRTC/FileTransfer.js", function() { 
                callback();
            });
            closeContextMenuUsers();//for Android Chrome
        }

        function sendFileBase(callback){
            consoleLog('sendFileBase()');
            sendBase(function(){
                loadScript("Scripts/WebRTC/SendFile.js", function() { 
                    callback();
                });
            });
        }

        function onclickSendFile(){
            sendFileBase(function() { 
                Files();
                new SendFile();
            });
        }

        function onclickCreateSessionCamera(){
            consoleLog('onclickCreateSessionCamera()');
            if(isBroadcastCamera()){
                var block = document.getElementById('SendCamera');
                do{
                    if(block.fileTransfer){
                        block.fileTransfer.cancel();
                        break;
                    }
                    block = block.parentElement
                }while(block);
                if(!block)
                    consoleError('block = ' + block);
            } else sendFileBase(function() { loadScript("Scripts/WebRTC/SendCamera.js", function(){ new SendCamera();});});
        }

        function onclickCreateSessionMicrophone(){
            consoleLog('onclickCreateSessionMicrophone()');
            if(isBroadcastMicrophone()){
                var block = document.getElementById('SendMicrophone');
                do{
                    if(block.fileTransfer){
                        block.fileTransfer.cancel();
                        break;
                    }
                    block = block.parentElement
                }while(block);
                if(!block)
                    consoleError('block = ' + block);
            } else sendFileBase(function() { loadScript("Scripts/WebRTC/SendMicrophone.js", function(){ new SendMicrophone();});});
        }

        function onclickSendPicture(){
            sendFileBase(function() { new SendPicture();});
        }

        function onclickSendVideo(){
            sendFileBase(function() { new SendVideo();});
        }

        function onclickSendAudio(){
            sendFileBase(function() { new SendAudio();});
        }

        function onclickCreateSessionScreen(){
            toggleVideoSession(getScreenID(g_user.id), '🖵 ' + lang.myScreen//'My screen'
                    , getSessionId(), true, true);
            closeContextMenuUsers();//for Android Chrome
        }

        function videosCount(){
            var videosCount = document.getElementsByName("video").length;
//            document.getElementById("videosCount").innerHTML = videosCount;
            document.getElementById('videos').querySelector('#fileTransfersCount').innerHTML = videosCount;
            return videosCount;
        }

        function microphonesCount(){
            var microphonesCount = document.getElementsByName("microphone").length;
            document.getElementById("microphonesCount").innerHTML = microphonesCount;
            return microphonesCount;
        }

        function onClickToolbarButton() {
            consoleLog("onClickToolbarButton()");

            closeContextMenuSend();

            if (!isEditorReady()){
                consoleError("Display tollbar failed! CKeditor is not ready.");
                return;
            }

            var display;
            var toolbarButton = document.getElementById("toolbarButton");
            var toolbarButtonText = document.getElementById("toolbarButtonText");
            if(isToolbarHide()){
                display = "block";
                toolbarButton.innerHTML = "▽";//http://unicode-table.com/ru/#box-drawing
                toolbarButton.title = lang.SingleLineMode;//"Single line mode";
            }else{
                display = "none";
                toolbarButton.innerHTML = "△";//http://unicode-table.com/ru/#box-drawing
                toolbarButton.title = lang.MultilineMode;//"Multiline mode";
            }

            /*
            //Uncompatible with IE5
            var toolbarRows = document.getElementsByClassName("cke_toolbar");
            for(i = 0; i < toolbarRows.length; i++){
                var toolbarRow = toolbarRows[i];
                if(toolbarRow.getAttribute('name') == "Smileys")
                    continue;
                toolbarRow.style.display = display;
            }
            */
            var toolbars = getToolbars();
            for(i = 0; i < toolbars.length; i++){
                var toolbarRow = document.getElementById(toolbars[i].id);
                if(toolbarRow.getAttribute('name') == "Smileys")
                    continue;
                toolbarRow.style.display = display;
            }

            onresize();
        }
        function openContextMenuUsers() {

            var contextMenuUsers = document.getElementById("contextMenuUsers");
            if (contextMenuUsers.className.indexOf('openContextMenu') != -1){
                consoleLog("openContextMenuUsers() contextMenuUsers.className.indexOf('openContextMenu') == " + contextMenuUsers.className.indexOf('openContextMenu'));
                return;
            }
            //consoleLog("openContextMenuUsers()");
            contextMenuUsers.className = contextMenuUsers.className.replace(' closeContextMenu', '');
            contextMenuUsers.className += " openContextMenu";
            var menuUsers = document.getElementById('menuUsers')
            var offsetSum = getOffsetSum(menuUsers);
            contextMenuUsers.style.left = offsetSum.left - contextMenuUsers.clientWidth + menuUsers.clientWidth + 'px';

            var elementUsers = document.getElementById('users');

            var videos = elementUsers.querySelectorAll('video');
            for(i = 0; i < videos.length; i++)
                videos[i].style.visibility = "hidden";

            var audios = elementUsers.querySelectorAll('audio');
            for(i = 0; i < audios.length; i++)
                audios[i].style.visibility = "hidden";

            //плавающие кнопки на панели инструментов не закрываются пунктами меню. Скрываю панель инструментов целиком
            var tools = elementUsers.querySelectorAll('#tools');
            for(i = 0; i < tools.length; i++)
                tools[i].style.visibility = "hidden";
        }

        function closeContextMenuUsers() {
            var element = document.getElementById("contextMenuUsers");
            //consoleLog("closeContextMenuUsers() element.className: '" + element.className);
            closeContextMenu(element);

            var elementUsers = document.getElementById('users');

            var videos = elementUsers.querySelectorAll('video');
            for(i = 0; i < videos.length; i++)
                videos[i].style.visibility = "visible";

            var audios = elementUsers.querySelectorAll('audio');
            for(i = 0; i < audios.length; i++)
                audios[i].style.visibility = "visible";

            var tools = elementUsers.querySelectorAll('#tools');
            for(i = 0; i < tools.length; i++)
                tools[i].style.visibility = "visible";
        }


        function openContextMenuSend() {

            var contextMenuSend = document.getElementById("contextMenuSend");
            if (contextMenuSend.className.indexOf('openContextMenu') != -1){
                consoleLog("openContextMenuSend() contextMenuSend.className.indexOf('openContextMenu') == " + contextMenuSend.className.indexOf('openContextMenu'));
                return;
            }
            consoleLog("openContextMenuSend()");
            contextMenuSend.className = contextMenuSend.className.replace(' closeContextMenu', '');
            contextMenuSend.className += " openContextMenu";
            var menuSend = document.getElementById('menuSend')
            var offsetSum = getOffsetSum(menuSend);
            contextMenuSend.style.top = offsetSum.top - contextMenuSend.clientHeight + 'px';
            contextMenuSend.style.left = offsetSum.left - contextMenuSend.clientWidth + menuSend.clientWidth + 'px';
        }

        function closeContextMenuSend() {
        }

        function closeContextMenu(element) {
            if (element.className.indexOf('closeContextMenu') != -1)
                return;
            element.className = element.className.replace(' openContextMenu', '');
            element.className += " closeContextMenu";
        }

        function onClickSmilesButton() {
            consoleLog("onClickSmilesButton()");

            closeContextMenuSend();

            if (!isEditorReady()){
                consoleError("Display the smileys tollbar failed! CKeditor is not ready.");
                return;
            }

            //Get the Smileys toolbar row
            //Uncompatible with IE5
            //var rowSmiles = document.getElementsByName('Smileys')[0];
            var rowSmiles;
            var toolbars = getToolbars();
            for(i = 0; i < toolbars.length; i++){
                var toolbarRow = document.getElementById(toolbars[i].id);
                if(toolbarRow.getAttribute('name') == "Smileys"){
                    rowSmiles = toolbarRow;
                    break;
                }
            }
            if(typeof rowSmiles == 'undefined'){
                consoleError("onClickSmilesButton() failed! rowSmiles is undefined");
                return;
            }

            document.getElementById("send").title = lang.sendMessage;//Send a message to the chat

            var smilesButton = document.getElementById("smilesButton");
            var smilesButtonText = document.getElementById("smilesButtonText");
            if(rowSmiles.style.display == "none"){
                rowSmiles.style.display = "block";
                smilesButton.innerHTML = '☹';
                smilesButton.title = lang.closeSmilesToolbar;
            }else{
                rowSmiles.style.display = "none";
                smilesButton.innerHTML = '😊';//☺🐯🐱
                smilesButton.title = lang.openSmilesToolbar;
            }
            onresize();
        }

        function onClickSend() {
            consoleLog("onClickSend()");
            try {

                var data;
                var value;
                if (isEditorReady()){
                    data = CKEDITOR.instances.editor.getData();
                    if(typeof DOMParser != 'undefined'){
                        var parser = new DOMParser()//uncompatible with IE5
                          , doc = parser.parseFromString(data, "text/html");
                    }
                    value = CKEDITOR.instances.editor.document.getBody().getText();
                }else {
                    consoleError("Send data failed! CKeditor is not ready.");
                    data = '<p>' + document.getElementById("editor").value + '</p>';
                    value = data;
                }

                //Is mesage empty?
                value = value.replace(/^\s+/, "");
                if ((value == "") && (!doc || doc.getElementsByTagName('img').length == 0)) {
                    inputKeyFilter.TextAdd(isRussian() ?
                            "Введите сообщение"
                            : "Please type a message"
                        , document.getElementById("cke_1_contents"), "downarrowdivred");

                    if (isEditorReady())
                        CKEDITOR.instances.editor.focus();
                    else document.getElementById("editor").focus();
                    return false;
                }

                var chat = $.connection.chatHub;
                // Call the Send method on the hub.
                // В IE6 Windows XP очень долго отправляется сообщение на сервер если открыто несколько страниц чата
                chat.server.send(g_chatRoom.RoomName, JSON.stringify(g_user), data);

                // Clear text box and reset focus for next comment.
                if (isEditorReady()){
                    // Fire "setData" so data manipulation may happen.
                    var eventData = { dataValue: '' };
                    CKEDITOR.instances.editor._.data = eventData.dataValue;
                    CKEDITOR.instances.editor.fire( 'afterSetData', eventData );
                    setTimeout(function() { CKEDITOR.instances.editor.focus(); }, 0);
                } else {
                    var editor = document.getElementById("editor");
                    editor.value = "";
                    editor.focus();
                }

            } catch (e) {
                var message;
                if(typeof e.message == 'undefined')
                    message = e;
                else message = e.message;
                ErrorMessage("Send data failed! " + message);
            }
            return true;
        }

        // Add an element to the page.
        function AddElement(el) {

            //time
            var elTime = document.createElement("span");
            elTime.innerHTML = '[' + new Date().toLocaleTimeString() + '] ';
            var childNode = el.childNodes[0];
            childNode.insertBefore(elTime, childNode.childNodes[0]);

            //for scrolling
            var elMessages = document.getElementById('messages');
            var boSrolling = Math.abs((parseInt(elMessages.scrollTop) + elMessages.clientHeight) - elMessages.scrollHeight) <= 1;
            //consoleLog('parseInt(elMessages.scrollTop) + elMessages.clientHeight) = ' + (parseInt(elMessages.scrollTop) + elMessages.clientHeight) + ' elMessages.scrollHeight = ' + elMessages.scrollHeight);

            $('#messages').append(el);

            if(boSrolling)
                el.scrollIntoView();

            if (!boBodyFocus)
                beep("../MyIsapi/sounds/din.mp3");
            documentTitle();
        }

        // Add the message to the page.
        function AddMessage(message) {
            var el = document.createElement('div');
            el.innerHTML = message;
            AddElement(el);
        }

        function onkeyupRoomName(e) {
            if (!e) e = window.event;
            var element = e.target || e.srcElement;
            consoleLog("onkeyupRoomName()");
            g_inputPrivateRoomName = element;
            var roomName = g_inputPrivateRoomName.value;
            if(roomName.replace(/^\s+/, '') == ''){
                return;
            }
            $.connection.chatHub.server.validRoomName(roomName, element.userID);
        }

        function getWaitIcon(){
            return '<img src="../img/Wait.gif" style="width: 20px; height:20px" title="' + lang.WaitingAnswer + '"/>';//'Waiting for a visitor answer'
        }

        var myRequestValidRoomName;
        function onclickGoToPrivate(e) {
            if (!e) e = window.event;
            var element = e.target || e.srcElement;
            consoleLog("onclickGoToPrivate()");
            g_inputPrivateRoomName = element.parentElement.childNodes[0];
            var roomName = g_inputPrivateRoomName.value;
            if(roomName.replace(/^\s+/, '') == ''){
                inputKeyFilter.TextAdd(lang.typeRoomName, g_inputPrivateRoomName, "downarrowdivred");//Type a name of the room first
                g_inputPrivateRoomName.focus();
                return;
            }
            var parentElement = getElementUser(element.parentElement);
            var user = getUserFromChatUsers(parentElement);
            var userID = user.id;//element.parentElement.parentElement.parentElement.parentElement.parentElement.user.id;

            var response = getSynchronousResponse("XMLHttpRequest.aspx?ValidRoomName=" + encodeURIComponent(roomName) + "&userID='" + userID);
            if(response == "0"){
                consoleLog('Room "' + roomName + '" is busy. userID=' + userID);
                inputKeyFilter.TextAdd(lang.roomIsBusy, g_inputPrivateRoomName, "downarrowdivred");//room is busy
                return;
            }

            consoleLog('Room name "' + roomName + '" is valid. userID=' + userID);
            invitation(userID, {
                RoomName: roomName,
                Private: true,
                PrivateID: response
            }
            );

            //Открыть новую вкладку браузера можно только тут
            var win = window.open('?browserID=' + g_user.browserID + '&chatRoom=' + encodeURIComponent(roomName) + '&private=' + userID
                + '&privateID=' + response, '_blank');
            if(win == null){
                alert(lang.pupupBlocked);//'Pupup window is blocked in your browser. Please unblok pupup windows for our site and try again.'
                return;
            }

            AddMessageToChat(lang.youInvited//'You invited '
                , user
                , lang.inPrivateRoom//' into a private room. '
                  + lang.WaitingAnswer);//'Waiting for a visitor answer
            return;
        }

        function onClickUser(e){
            if (!e) e = window.event;

            //http://javascript.ru/forum/events/28424-kak-otmenit-sobytie-roditelya.html
            e.cancelBubble = true;

            var elementParent = e.target || e.srcElement;
            if(elementParent.parentElement.tagName != 'B')
                elementParent = elementParent.parentElement;
            if(elementParent.parentElement.tagName != 'B')
                return;//Окно посетителя уже открыто и пользователь щелкнул по окну посетителя
            usersWindow(elementParent.parentElement);
        }

        function privateBranch(itemPrivate) {

            if(typeof itemPrivate == 'undefined'){
                consoleError("privateBranch(itemPrivate) failed! itemPrivate is undefined");
                return;
            }

            consoleLog("privateBranch(" + itemPrivate + ")");

            //var triangle = itemPrivate.getElementsByClassName("triangle")[0];Do not support by IE 8
            var triangle = getElementByClassName(itemPrivate, 'triangle');
            if(!triangle){
                consoleError("privateBranch(itemPrivate) failed! triangle is null");
                return;
            }
            var expanded = ' expanded';
            //var element = itemPrivate.getElementsByClassName("branch")[0];Do not support by IE 8
            var element = getElementByClassName(itemPrivate, "branch");
            if(triangle.innerHTML == "▶"){
                triangle.innerHTML = "▼"
                if(!element){
                    element = document.createElement("div");
                    element.className = 'branch b-toggle' + expanded;
                    var user = getUserFromChatUsers(itemPrivate.parentElement.parentElement);
                    var userID = user.id;//itemPrivate.parentElement.parentElement.user.id;
                    var userName = user.nickname;//itemPrivate.parentElement.parentElement.user.nickname;
                    element.innerHTML =
                        '<div>'

                            //input The name of the private room
                          + '<input'
                            + ' id="RoomName' + userID + '"'
                            + ' title="' + lang.privateRoomTitle + userName + '"'//The name of the private room with 
                            + ' placeholder="' + lang.privateRoomName + '"'//Private room name
                            + ' onkeyup="onkeyupRoomName(event)"'
                            + ' value=' + g_user.nickname
                          + ' />'

                            //button Go to Private room
                          + '<input'
                            + ' type="button"'
                            + ' id="GoPrivate' + userID + '"'
                            + ' style="margin-left:5px"'
                            + ' value="' + lang.go + '"'//Go
                            + ' title="' + lang.goTitle + userName + '"'//Go to private room with 
                            + ' placeholder="' + lang.privateRoomName + '"'//Private room name
                            + ' onclick="onclickGoToPrivate(event)"'
                          + ' />'
                          + '<span id="invitationPrivateResponse' + userID + '" style="margin:5px;"></span>'
                        + '</div>'
                    ;
                    itemPrivate.appendChild(element);

                    var inputRoomName = document.getElementById('RoomName' + userID);
                    inputRoomName.roomIsBusy=true;
                    inputRoomName.userID = userID;
                } else {
                    element.className += expanded;
                }
            } else {
                triangle.innerText = "▶"
                if(!element){
                    consoleError("onClickPrivate(e) failed! branch is undefined");
                    return;
                }
                element.className = element.className.replace(expanded, '');//закрыть окно
            }
        }

        var g_inputPrivateRoomName = null;
        function onClickPrivate(e) {
            if (!e) e = window.event;

            //http://javascript.ru/forum/events/28424-kak-otmenit-sobytie-roditelya.html
            e.cancelBubble = true;

            var itemPrivate = e.target || e.srcElement;
            if (itemPrivate.tagName == "SPAN")
                itemPrivate = itemPrivate.parentElement;
            else return;
            privateBranch(itemPrivate);
        }

        function createElementMyUser() {
            var a = document.createElement("a");
            a.innerHTML = getUserString(g_user);
            if((typeof g_user.browserID == 'undefined') || (g_user.browserID == '')){
                consoleError("createElementMyUser() failed! g_user.browserID is undefined");
            }
            a.href = '../chat/?browserID=' + g_user.browserID + '&chatRoom=' + encodeURIComponent(g_chatRoom.RoomName);
            a.target="_blank";
            a.title=lang.myProfile;//My profile
            return a;
        }

        function onclickGeolocation(event) {
            consoleLog("onclickGeolocation()");
            var elementUser = getElementUser(event.target.parentElement);
            var informer = elementUser.querySelector('#geolocation');
            onbranchelementBase(informer, elementUser.querySelector('#branchGeolocation'));
            if(isBranchExpanded(informer)){
                var mapContainer = elementUser.querySelector('#mapContainer');
                mapContainer.style.height = mapContainer.clientWidth + 'px';
                mapContainer.position = getUserFromChatUsers(elementUser).position;
                mapPosition(mapContainer);
            }else {
                consoleLog("onclickGeolocation() branch = not Expanded");
            }
        };

        function getUserInfo(elementParent){
            var user = getUserFromChatUsers(elementParent);
            var userInfo = '';
            if(((user.firstName != null) && (user.firstName != '')) || ((user.secondName != null) && (user.secondName != '')))
                userInfo += '<tr><td style="border:0px"><span style="float:right">' + lang.name + ':</span></td>'//'Name'
                    + '<td style="border:0px">'
                        + ((user.firstName == null) ? '' : user.firstName) + ' ' + ((user.secondName == null) ? '' : user.secondName)
                    + '</td></tr>';
            if(user.birthday && (user.birthday != ''))
                userInfo += '<tr><td style="border:0px"><span style="float:right">' + lang.age + ':</span></td>'//'Age'
                    + '<td style="border:0px" id="age">' + getAge(user.birthday) + '</td></tr>';
            var gender = getGenderString(user);
            if(gender.gender != '')
                userInfo += '<tr><td style="border:0px"><span style="float:right">' + lang.gender + ':</span></td>'//'Gender'
                    + '<td style="border:0px">' + gender.gender + ' ' + gender.title + '</td></tr>';

            //visitor's local time
            elementParent.visitorLocalTime = {
                timezoneShift: new Date().getTimezoneOffset() - user.timezoneOffset
                , interval: function () {
                    //consoleLog("setInterval. visitor's local time");
                    var date = new Date(new Date().setMinutes(new Date().getMinutes() + this.visitorLocalTime.timezoneShift));
                    this.querySelector('#visitorLocalTime').innerHTML
                        //toLocaleTimeString() иногда возвращает время, которое отличается от toTimeString() непонятно почему.
                        //Может быть это связано с летним временем
                        //Я заметил что на моем Server 2012R2 неправильно указана time zone для Москвы (+4 вместо +3) и Красноярска
                        //= date.toLocaleTimeString();
                        //сейчас время выводится без учета региональных особенностей
                        = date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds();
                }
            }
            var hoursDifference = parseInt(elementParent.visitorLocalTime.timezoneShift / 60);
            var timeoutId = window.setInterval(function () {elementParent.visitorLocalTime.interval.call(elementParent)}, 1000);
            userInfo += '<tr title="' + lang.visitorTime + '"><td style="border:0px"><span style="float:right">' + lang.time + ':</span></td>'//'visitor's local time'
                + '<td style="border:0px">'
                    + '<span id="visitorLocalTime"></span>'
                    + '<span>' + ((hoursDifference == 0) ? '' : ('. ' + lang.hoursDifference.replace('%s', hoursDifference))) + '</span> '
                + '</td></tr>';

            if(user.browser)
                userInfo += '<tr><td style="border:0px"><span style="float:right">' + lang.browser + ':</span></td>'//'Browser'
                    + '<td style="border:0px">' + user.browser.name + ' ' + user.browser.version + '</td></tr>';

            if(user.os)
                userInfo += '<tr><td style="border:0px"><span style="float:right">' + lang.os + ':</span></td>'//'OS'
                    + '<td style="border:0px">' + user.os.name + ' ' + ((user.os.version == -1) ? '' : user.os.version) + '</td></tr>';

            if(typeof user.isMobileDevice != 'undefined')
                userInfo += '<tr><td style="border:0px"><span style="float:right">' + lang.device + ':</span></td>'//'Device'
                    + '<td style="border:0px">' + ((user.isMobileDevice == true) ? lang.mobile : lang.desktop) + '</td></tr>';

            //location
            if(user.location && (user.location != ''))
                userInfo += '<tr><td style="border:0px"><span style="float:right">' + lang.location + ':</span></td>'//'Location'
                    + '<td style="border:0px" id="location">' + user.location + '</td></tr>';

            if(userInfo != '')
                userInfo = '<table style="width:auto"><tbody>' + userInfo + '</tbody></table>'

            //Geolocation
            if(user.position)
                userInfo += 
                          '<a href="#" onclick="javascript: onclickGeolocation(event)">'
                            + '<span id="branchGeolocation">▶</span>'
                            + '<span>' + lang.geolocationPrompt + '</span>'//Geolocation
                        + '</a>'
                    + '<div id="geolocation" class="b-toggle">'
                        + '<div id="mapContainer" class="blok" style="margin:5px;" onresize></div>'
                    + '</div>';

            //aboutMe
            if(user.aboutMe && (user.aboutMe != ''))
                userInfo += '<div>' + lang.aboutMe + ': '//'About Me'
                    + user.aboutMe + '</div>';

            if(userInfo != '')
                userInfo += '<hr>'

            //ignore
            var checked;
            if (user.ignore)
                checked = 'checked';
            else checked = '';
            userInfo += '<div><input type="checkbox" ' + checked + ' onclick="onclickIgnore()" class="ignore"/>' + lang.ignore + '</div>'//Ignore

            return userInfo;
        }

        function onclickIgnore(){
            if (!event) event = window.event;//for IE6
            var target = event.target || event.srcElement;
            consoleLog('onclickIgnore() checked = ' + target.checked);
            var user = getUserFromChatUsers(getElementUser(target));
            var display;
            if(target.checked){
                user.ignore = true;
                display = 'none';
            } else {
                user.ignore = false;
                display = 'block';
            }
            
            //http://stackoverflow.com/questions/20306204/using-queryselector-with-ids-that-are-numbers
            //https://mathiasbynens.be/notes/css-escapes
            var users = document.querySelectorAll('#' + CSSescape(user.id));
            for(var i = 0; i < users.length; i++){
                var ignore = users[i].querySelector(".ignore");
                if(ignore)
                    ignore.checked = target.checked;
                if(users[i].parentElement.parentElement.id != "chatusers"){//удалять все записи посетителя кроме посетителя в списке посетителей
                    var parentElement = users[i].parentElement.parentElement.parentElement;//.parentElement;
                    var elementVisibility;
                    if(
                        //                            (parentElement.id.indexOf('Transfers') != -1)||
                             (parentElement.id.indexOf('Block') != -1)//receive file or picture or video or audio
                        )
                        elementVisibility = parentElement;
                    else {
                        parentElement = parentElement.parentElement;
                        if(parentElement.id.indexOf('Block') != -1)//camera or microphone
                            elementVisibility = parentElement;
                        else elementVisibility = users[i].parentElement.parentElement;//messages
                    }
                    elementVisibility.style.display = display;
                }
            }
        }

        function getElementUser(parentElement){
            while(parentElement && (typeof parentElement.user == 'undefined') && (typeof parentElement.userId == 'undefined'))
                parentElement = parentElement.parentElement;
            return parentElement;
        }

        function getUserFromChatUsers(elementParent){
            var user = elementParent.user;
            if (typeof user != 'undefined')
                return user;
            //окно пользователя открывается не в списке посетителей данной комнаты
            //ищем посетителя в списке посетителей комнаты
            var elUser = document.getElementById('chatusers').querySelector('#' + CSSescape(elementParent.id));
            if(elUser)
                return elUser.user;
            alert(lang.userNotFound);//The visitor left the room
            return null;
        }

        function usersWindow(elementParent, boAddUser){

            if(elementParent.tagName != 'B'){
                consoleError('usersWindow(elementParent) failed! elementParent.tagName = ' + elementParent.tagName + ' != "B"');
                return;
            }

            var roomName = elementParent.roomName;
            var elementChatUsers = elementParent.parentElement.parentElement;
            var triangle = '▼';

            //if(elementParent.getElementsByClassName("elementUser").length == 0)Do not support by IE 8
            if(getElementByClassName(elementParent, "elementUser") == null)
            {
                //добавляем окно пользователя
                var user = getUserFromChatUsers(elementParent);
                if(!user)
                    return;
                var userName = user.nickname;
                var id = user.id;
                consoleLog('User onclick id = ' + id + ', userName = ' + userName + ', elementParent = ' + elementParent + ')');

                var element = document.createElement("div");
                element.className = "elementUser";
                var inviteToCurrentChat = "";
                if(roomName != g_chatRoom.RoomName)
                    inviteToCurrentChat =
                          '<div>'
                            + '<input type="text" id="invitationText' + id + '" style="margin:5px;" placeholder="' + lang.invitationsText + '" />'//Invitations text
                            + '<input type="button" onclick="javascript: return onInvitation(\'' + id + '\', \'' + elementParent.userName + '\')"'
                            + ' id="inviteButton' + id + '"'
                            + ' value="' + lang.invite + '"'//Invite
                            + ' title="'+ lang.inviteTo.replace("%s2", g_chatRoom.RoomName).replace("%s", userName) + '"'//Invite %s user to the %s2 room
                            + ' />'
                            + '<span id="invitationResponse' + id + '" style="margin:5px;"></span>'
                        + '</div>'
                ;
                var userInfo = getUserInfo(elementParent);
                if(userInfo != '')
                    userInfo = '<span id="userInfo">' + userInfo + '</span>'

                element.innerHTML =
                      '<div  class="gradient b-toggle branch" />'
                      + userInfo
                      + inviteToCurrentChat
                      + '<span class="triangle">▶</span>'
                      + '<span class="pointer" onclick="javascript: onClickPrivate(event)"'
                          + ' title="'+ lang.privateTitle.replace("%s", userName) + '"'//Invite %s for a private chat
                      + ' />'
                        + lang.privateUser//Private
                      + '</span>'
                    + '</div>'
                ;
                elementParent.appendChild(element);
                if((g_chatRoom.privateRoomName == roomName) && boAddUser){
                    document.getElementById("invitationResponse" + id).innerHTML = getWaitIcon();
                }
                g_elementExpandedClass = null;
                for(var i=0; i < element.childNodes.length; i++){
                    if(element.childNodes[i].tagName == "DIV")
                        g_elementExpandedClass = element.childNodes[i];
                }
                if(!g_elementExpandedClass){
                    consoleError("Can not find a private element");
                    return;
                }

                //здесь сделал задержку 100 мс. для того что бы сработал g_elementExpandedClass.scrollIntoView()
                //когда открывается приватная комната и я хочу чтобы было видно окно посетителя, который приглашен для привата.
                //Можно было бы вызывать g_elementExpandedClass.scrollIntoView() сразу когда тег "chatbody" становится видимым:
                //document.getElementById("chatbody").style.visibility = "visible";
                //но я не могу найти место где это делается
                setTimeout(function() { g_elementExpandedClass.className += " expanded"; g_elementExpandedClass.scrollIntoView();}, 100);
            } else {
                //открыть или закрыть окно пользователя
                //var element = elementParent.getElementsByClassName("elementUser")[0].childNodes[0];Do not support by IE 8
                var element = getElementByClassName(elementParent, 'elementUser').childNodes[0];
                var expanded = ' expanded';
                if (element.className.indexOf(expanded) == -1)
                    element.className += " expanded";//открыть окно пользователя
                else {
                    element.className = element.className.replace(expanded, '');//закрыть окно пользователя
                    triangle = '▶';
                }
            }
            //elementChatUsers.getElementsByClassName('triangle')[0].innerText = triangle;Do not support by IE 8
            getElementByClassName(elementParent, 'triangle').innerText = triangle;
        }

        function getGenderString(user)
        {
            var gender = '', color = 'black', title = '', old = false;
            if(user.birthday && (getAge(user.birthday) > 30))
                old = true;
            if ((typeof user.genderId != 'undefined') && (user.genderId != null)){
                switch(user.genderId){
                    case '0'://select gender
                        gender = '';
                        break;
                    case '3'://male
                        if(old){
                            gender = '👨';//♂
                            title = lang.male;//'male'
                        } else {
                            gender = '👦';//♂
                            title = lang.giy;//'giy'
                        } 
                        break;
                    case '4'://female
                        color = 'pink';
                        if(old){
                            gender = '👩';//🛊♀
                            title = lang.female;//'female'
                        } else{
                            gender = '👧';//🛊♀
                            title = lang.girl;//'girl'
                        }
                        break;
                    case '2'://couple
                        gender = '🚻';
                        title = lang.couple;//'couple'
                        break;
                    case '1'://another
                        gender = '⚥';//⚣♀♂⚢
                        color = 'blue';
                        title = lang.another;//'another'
                        break;
                    default:
                        consoleError('invalid gender id: ' + user.genderId);
//                        gender = '';
                }
            }
            if(gender != '')
                gender = '<font style="COLOR: ' + color + ';" title="' + title + '">' + gender + '</font> ';
            return {
                gender:gender
                ,title:title
                };
        }

        function getUserString(user)
        {
            var age = '';
            if(user.birthday)
                age = ' <span title="' + lang.age + '">'//Age
                        + getAge(user.birthday)
                    + '</span>: ';

            return getGenderString(user).gender + age + '<span id="userName">' + user.nickname + '</span>';
        }

        function getAge(birthday){
            if(!birthday){
                consoleError('birthday: ' + birthday);
                return null;
            }
            //http://javascript.ru/forum/misc/38107-vychislenie-vozrasta.html
            return (((new Date().getTime() - new Date(birthday)) / (24 * 3600 * 365.25 * 1000)) | 0)
        }

        function AddElementUser(user, roomName, boSaveUser)
        {
            var userName = user.nickname;
            var id = user.id;

            if(g_user.nickname == userName){
                if(typeof g_user.id == 'undefined')
                    g_user.id = id;
                if(typeof user.browserID != 'undefined')
                    g_user.browserID = user.browserID;
                g_user.updateProfile(user);
                var a = createElementMyUser();
                a.id = id;
                documentTitle();
                return a;
            }
            var b = document.createElement("b");
            b.name = 'user'
            b.id = id;
            if(boSaveUser)
                b.user = user;
            else b.userId = user.id;
            if(typeof roomName == 'undefined'){
                //consoleError('AddElementUser(user, roomName) failed! roomName is undefined');
                roomName = g_chatRoom.RoomName;
            }
            b.roomName = roomName;

            b.innerHTML = '<span class="triangle">▶</span>'
                + '<span class="eventKey" style="display:none" title="' + lang.pressKey + '">. </span>'//The visitor is typing text
                + '<span class="pointer" title="' + lang.aboutUser + ' ' + userName//about
                + '">' + getUserString(user) + '</span>';
            b.onclick = onClickUser;
            return b;
        }

        //ATTENTION!!! Also see createElementRoom in G:\My documents\MyProjects\trunk\WebFeatures\WebFeatures\Chat\Default.aspx
        function createElementRoom(elementRoom, room)
        {
            if(g_chatRoom.RoomName == room.RoomName)
                return;
            elementRoom.innerHTML = '<span class="triangle">▶</span><span class="pointer" onclick="javascript: onclickItemRoom(event)">' + room.RoomName + '</span><span style="float: right">' + room.usersCount + '</span>';
        }

        function AddAllUsers(allUsers, roomName){
            // Добавление всех пользователей
            for (i = 0; i < allUsers.length; i++) {
                var ConnectionId = allUsers[i].id;
                if(typeof ConnectionId == 'undefined'){
                    consoleError('AddAllUsers(...) failed. ConnectionId is undefined');
                    return;
                }
                var user = allUsers[i];
                AddUser(user, '', roomName);
            }
        }

        function getInvitationResponse(idAsk){
            var invitationResponse = document.getElementById("invitationResponse" + idAsk);
            if(invitationResponse && (invitationResponse.innerHTML != '')){
                return invitationResponse;
            }

            invitationResponse = document.getElementById("invitationPrivateResponse" + idAsk);
            if(!invitationResponse){//сюда попадает когда 
                //consoleError("invite user " + idAsk + " is not found");
                return null;
            }
            if(invitationResponse.innerHTML != '')
                return invitationResponse;

            //consoleError("getInvitationResponse(" + idAsk + ") failed! invitationResponse is now found");
            return null;
        }

        function setInvitationResponse(invitationDataMessage, callback){

            var elementResponseId;
            if(g_chatRoom.RoomName != invitationDataMessage.room.RoomName)
                elementResponseId = 'invitationPrivateResponse';
            else elementResponseId = 'invitationResponse';

            var invitationResponses = document.querySelectorAll("#" + elementResponseId + invitationDataMessage.idAsk);
            for(var i=0;i<invitationResponses.length;i++){
                callback(invitationResponses[i], invitationDataMessage.idAsk);
            }
        }
        function isIgnore(id){
            var ignore = document.getElementById('chatusers').querySelector('#' + CSSescape(id)).querySelector('.ignore');
            if(ignore && ignore.checked)
                return true;
            return false;
        }

//        var g_sendingFile = false, g_sendingFileStack = [];
        var g_sendingFileStack = [];

        //<!--Add script to update the page and send messages.-->
        $(function () {
            try {

                // Declare a proxy to reference the hub.
                var chat = $.connection.chatHub;
                // Create a function that the hub can call to broadcast messages.
                chat.client.broadcastMessage = function (JSONUser, message) {
                    // Html encode display name and message.
                    var el = document.createElement('div');
                    el.name="message";
                    el.innerHTML = message;
                    var elementMessage = el.childNodes[0];
                    elementMessage.insertBefore(document.createTextNode(': '), elementMessage.childNodes[0]);
                    var user = JSON.parse(JSONUser);
                    elementMessage.insertBefore(AddElementUser(user), elementMessage.childNodes[0]);

                    if(isIgnore(user.id))
                        el.style.display = 'none';

                    AddElement(el);
                };

                chat.client.onEditorKey = function (userId, keyCode) {
//                    consoleLog('chat.client.onEditorKey(' + userId + ', ' + keyCode + ')');
                    var elementEventKey = document.getElementById('chatusers').querySelector('#' + CSSescape(userId)).querySelector('.eventKey');
                    elementEventKey.style.display = 'inline'
                    elementEventKey.intervalKey = function () {
                        //consoleLog('elementEventKey.intervalKey');
                        if(this.innerHTML == '. ')
                            this.innerHTML = ' .';
                        else this.innerHTML = '. ';
                    }
                    elementEventKey.setTimeoutKey = function () {
                        window.setTimeout(function () { elementEventKey.timeoutKey.call(elementEventKey) }, 2000);
                        this.displayEventKey = true;
                        if(!elementEventKey.intervalID)
                            elementEventKey.intervalID = window.setInterval(function () { elementEventKey.intervalKey.call(elementEventKey) }, 300);
                    }
                    elementEventKey.timeoutKey = function () {
//                        consoleLog('elementEventKey.timeoutKey');
                        if(elementEventKey.displayEventKeyContinue){
                            elementEventKey.setTimeoutKey();
                            elementEventKey.displayEventKeyContinue = false;
                            return;
                        }
                        elementEventKey.style.display = 'none'
                        elementEventKey.displayEventKey = false;
                        window.clearInterval(elementEventKey.intervalID);
                        delete elementEventKey.intervalID;
                    }
                    if(!elementEventKey.displayEventKey){
                        elementEventKey.setTimeoutKey();
                    } else elementEventKey.displayEventKeyContinue = true;
                };

                chat.client.onPing = function () {
                    consoleLog("chat.client.onPing()");
                    $.connection.chatHub.server.pong(JSON.stringify(g_user));
                }

                chat.client.onRemoveRoom = function (roomName, roomsCount) {
                    document.getElementById("roomsCount").innerHTML = roomsCount;
                    g_onRemoveRoom(roomName);
                }

                chat.client.onUpdateRoom = function (room, strRoomNamePrev, roomsCount) {
                    document.getElementById("roomsCount").innerHTML = roomsCount;
                    g_onUpdateRoom(room, strRoomNamePrev);
                }

                chat.client.onGetVideoCount = function (videoID) {
                    consoleLog('chat.client.onGetVideoCount(videoID = ' + videoID + ')');
                    var videoBlock = document.getElementById(getVideoBlockID(videoID));
                    if(videoBlock)
                        videoBlock.addMedia.app.peer.setPeersCount();
                }

                chat.client.onGetMicrophoneCount = function (microphoneID) {
                    consoleLog('chat.client.onGetMicrophoneCount(microphoneID = ' + microphoneID + ')');
                    var microphoneBlock = document.getElementById(getMicrophoneBlockID(microphoneID));
                    if(microphoneBlock)
                        microphoneBlock.addMedia.app.peer.setPeersCount();
                }

                chat.client.onAddRemoteVideoControl = function (videoID, peerId, connectionId, captureScreen) {
//                    consoleLog('chat.client.onAddRemoteVideoControl(videoID = ' + videoID + ', connectionId = ' + connectionId + ')');
                    if(captureScreen == true){
                        var screenBlock = getScreenBlock(videoID);
                        if(screenBlock){
                            screenBlock.addMedia.onAddRemoteVideoControl(videoID, peerId, connectionId);
                            return;
                        }
                    } else {
                        var videoBlock = getCameraBlock(videoID);
                        if(videoBlock){
                            videoBlock.addMedia.onAddRemoteVideoControl(videoID, peerId, connectionId);
                            return;
                        }
                    }
                    consoleError('chat.client.onAddRemoteVideoControl(videoID = ' + videoID + ', peerId = ' + peerId + ', connectionId = ' + connectionId + ', captureScreen = ' + captureScreen + ')');
                }

                chat.client.onAddRemoteVideoControlSucces = function (videoID, peerId, captureScreen) {
//                    consoleLog('chat.client.onAddRemoteVideoControlSucces(videoID = ' + videoID + ', peerId = ' + peerId + ')');
                    var videoBlock;
                    if(captureScreen)
                        videoBlock = getScreenBlock(videoID);
                    else videoBlock = getCameraBlock(videoID);
                    videoBlock.addMedia.onAddRemoteVideoControlSucces(peerId);
                }
                
                chat.client.onSendFile = function (JSONUser, JSONFileTransfer) {
                    consoleLog('chat.client.onSendFile(JSONUser: ' + JSONUser + ', JSONFileTransfer: ' + JSONFileTransfer + ')');
                    //надо запомнить парамерты в массиве g_sendingFileStack потому что если посетители одновременно делают несколько трансляций
                    // и/или отпаравляют несколько файлов, то chat.client.onSendFile вызывается несколько раз подряд
                    // еще до того как загрузился файл ReceiveFile.js и поэтому ReceiveFileStart будет вызываться только с последними парамерами JSONUser, JSONFileTransfer
                    // В результате при обновлении страницы чата не все файлы и трансляции будут видны
                    g_sendingFileStack.push({user: JSONUser, fileTransfer: JSONFileTransfer});
/*
                    if(g_sendingFile){//поступило более одного вызова chat.client.onSendFile до того, как загрузился файл ReceiveFile.js
                        //сюда попадает когда в комнате у одного из посетителей одновременно включена камера и отправляется файл
                        //а другой посетитель очистил стек браузера с временными файлами и обновил страницу
                        g_sendingFileStack.push({user: JSONUser, fileTransfer: JSONFileTransfer});
                        return;
                    }
                    g_sendingFile = true;
*/
                    loadScript("Scripts/WebRTC/FileTransfer.js", function() { //если тут не загружать FileTransfer.js
                        //то поевляется сообщение об ошибке: 
                        // ?chatRoom=Chat:1759 Uncaught ReferenceError: ReceiveFileStart is not defined(…)
                        // если один посетитель начал трансляцию с камеры и отправляет файл
                        // а другой посетитель очистил кеш и обновил страницу
                        loadScript("Scripts/WebRTC/ReceiveFile.js", function() { 
                            //                        ReceiveFileStart(JSONUser, JSONFileTransfer);
                            if(typeof ReceiveFileStart != undefined){
    //                            consoleDebug('ReceiveFileStart = ' + ReceiveFileStart);
                                while (g_sendingFileStack.length > 0) {
                                    var sendingFile = g_sendingFileStack.pop();
                                    ReceiveFileStart(sendingFile.user, sendingFile.fileTransfer);
                                }
                            }
                        });
                    });
                }
/*
                chat.client.onSendFileArray = function (JSONUser, JSONFileTransferArray//список всех отправляемых посетителем камер, микоофонов и файлов
                    //Если отправлять отдельно каждый элемент списка при помощи chat.client.onSendFile, 
                    //и если в списке более одного елемента, то вызов ReceiveFileStart произойдет не со всеми элементами списка потому что 
                    //пока загружается ReceiveFile.js, значения JSONUser, JSONFileTransfer изменятся
                    ) {
                    consoleLog('chat.client.onSendFileArray(JSONUser: ' + JSONUser + ', JSONFileTransfer: ' + JSONFileTransferArray + ')');
                    loadScript("Scripts/WebRTC/ReceiveFile.js", function() { 
                        //consoleLog('JSONFileTransferArray: ' + JSONFileTransferArray);
                        var user = JSON.parse(JSONUser);
                        var arrayFileTransfers = JSON.parse(JSONFileTransferArray);
                        while (arrayFileTransfers.length > 0)
                            ReceiveFileStart2(user, arrayFileTransfers.pop());
                    });
                }
*/
                chat.client.onSendFileRequest = function (userID) {
                    consoleLog('chat.client.onSendFileRequest(userID = ' + userID + ')');
                    loadScript("Scripts/WebRTC/FileTransfer.js", function() {
                        loadScript("Scripts/WebRTC/ReceiveFile.js", function() { 
                            $.connection.chatHub.server.sendFileStart(userID, g_user.id);
                        });
                    });
                }
                chat.client.onSendFileStart = function (userIDReceiver) {
                    consoleLog('chat.client.onSendFileStart(userIDReceiver : ' + userIDReceiver + ')');
                    var fileTransfers = document.getElementsByName('fileTransfer');
                    for(i = 0; i < fileTransfers.length; i++){
                        var fileTransfer = fileTransfers[i];
                        if(
                            (typeof fileTransfer.fileTransfer == 'undefined')
                            || (typeof fileTransfer.fileTransfer.sendFile == 'undefined')
                            || (
                                (typeof fileTransfer.fileTransfer.loadedmetadata != 'undefined')//'это видеокамера
                                    && (fileTransfer.fileTransfer.loadedmetadata == false)//видеокамера еще не открылась
                                )
                            )
                            continue;
//                        fileTransfer.fileTransfer.sendFile();
                        $.connection.chatHub.server.sendFileToUser(JSON.stringify(g_user)
                            , JSON.stringify(fileTransfer.fileTransfer.sendFileBase()), userIDReceiver);
                    }
                }

                chat.client.onfileTransferCancel = function (JSONUser, fileTransferID) {
                    consoleLog('chat.client.onfileTransferCancel(JSONUser: ' + JSONUser + ', fileTransferID: ' + fileTransferID + ')');
                    var user = JSON.parse(JSONUser);
                    var elementFileTransfer = document.getElementById(fileTransferID + "Block");
                    if(elementFileTransfer)
                        elementFileTransfer.fileTransfer.cancel();
                    else consoleError('elementFileTransfer = ' + elementFileTransfer);
                }

                chat.client.onConsoleLog = function (message) {
                    console.log(message);
                }

                chat.client.onConsoleError = function (message) {
                    console.error(message);
                }

                chat.client.onConsoleWarn = function (message) {
                    console.warn(message);
                }

                chat.client.onConsoleDebug = function (message) {
                    console.debug(message);
                }
                chat.client.onPeerSend2 = function (mediaID, JSONData) {
                    if (typeof onPeerSend == 'undefined')
                        loadScript("Scripts/WebRTC/Peer.js", function (){peer.onPeerSend (mediaID, JSONData);});
                    else onPeerSend (mediaID, JSONData);
                }

                chat.client.onRestartLocalMedia = function (videoID, restart) {
                    consoleLog('chat.client.onRestartLocalMedia(' + videoID + ', ' + restart + ')');
                    getVideoBlock(videoID).restartLocalMedia = restart;
                }
                chat.client.onPeersCount = function (mediaID, peersCount) {
                    var block = getVideoBlock(mediaID);
                    if(block == null)
                        return;//сюда иногда  попадает когда отправитель перезапустил трансляцию во время смены камеры или микрофона
                    var element = block.querySelector('#PeersCount');
                    if(!element)
                        return;//Во время отправки файла не отображается количество получателей
                    consoleLog('chat.client.onPeersCount(mediaID = ' + mediaID + ', PeersCount = ' + peersCount + ')');
                    element.innerHTML = peersCount;
                }

                chat.client.onWaitPermission = function (waitPermissionDataJSON)
                {
                    consoleLog('chat.client.onWaitPermission("' + waitPermissionDataJSON + '")');
                    var waitPermissionMessage = JSON.parse(waitPermissionDataJSON);

                    var permissionID, cookieName;
                    switch(waitPermissionMessage.id){
                        case 1://Snapshot
                            permissionID = getWaitPermissionSnapshotID(waitPermissionMessage.from.id);
                            cookieName = 'AllowSnapshot';
                            break;
                        case 2://Camera record
                            permissionID = getWaitPermissionVideoID(waitPermissionMessage.from.id);
                            cookieName = 'AllowSnapshot';
                            break;
                        case 3://Microphone record
                            permissionID = getWaitPermissionMicrophoneID(waitPermissionMessage.from.id);
                            cookieName = 'AllowMicrophoneRecord';
                            break;
                        default: consoleError('waitPermissionMessage.id = ' + waitPermissionMessage.id);
                    }
                    var allow = get_cookie(cookieName, 'ask');
                    if(allow == 'true'){
                        $.connection.chatHub.server.waitPermissionOK(JSON.parse(waitPermissionDataJSON).from.id, JSONWaitPermission(waitPermissionMessage.id));
                        return;
                    }

                    if(allow == 'false'){
                        $.connection.chatHub.server.waitPermissionDenie(JSON.parse(waitPermissionDataJSON).from.id, JSONWaitPermission(waitPermissionMessage.id));
                        return;
                    }
                    if(!document.getElementById(permissionID)){

                        //new invitation

                        document.getElementById("noInvitations").style.display = 'none';
                        document.getElementById("invitations").style.display = 'block';
                        onbranch('informerInvitations', 'branchInvitations', true);

                        var permissionText;
                        switch(waitPermissionMessage.id){
                            case 1: permissionText = lang.waitSnapshotPermissionFrom; break;//'<span id="user"></span> viewer awaits permission to take a snapshot from your camera.'
                            case 2: permissionText = lang.waitVideoRecordPermissionFrom; break;//'<span id="user"></span> viewer awaits permission for start of the video recording from your camera.'
                            case 3: permissionText = lang.waitMicrophoneRecordPermissionFrom; break;//'<span id="user"></span> listener awaits permission for start of the audio recording from your microphone.'
                            default:{
                                consoleError('chat.client.onWaitPermission("' + waitPermissionDataJSON + '") failed! waitPermissionMessage.id = ' + waitPermissionMessage.id);
                                return;
                            }
                        }

                        var ignoreTitle, allowAllTitle, denyAllTitle, mediaName;
                        switch(waitPermissionMessage.id){
                            case 1: //Snapshot
                            case 2: //Camera record
                                ignoreTitle = lang.ignoreTitle;//Ignore of this viewer
                                allowAllTitle = lang.allowAllViewersTitle;//Allow all viewers to take snapshot and video recording from my video camera
                                denyAllTitle = lang.denyAllViewersTitle;//Deny all viewers to take a snapshot and video recording from your video camera
                                mediaName = 'Camera';
                                break;
                            case 3://Microphone record
                                ignoreTitle = lang.ignoreListenerTitle;//Ignore of this listener
                                allowAllTitle = lang.allowAllListenersTitle;//Allow all listeners to record sound from my microphone
                                denyAllTitle = lang.denyAllListenersTitle;//Deny all listeners to record sound from my microphone
                                mediaName = 'Microphone';
                                break;
                            default:{
                                consoleError('chat.client.onWaitPermission("' + waitPermissionDataJSON + '") failed! waitPermissionMessage.id = ' + waitPermissionMessage.id);
                                return;
                            }
                        }

                        $("#informerInvitations").append(
                              '<div id=' + permissionID + ' name="waitPermission" class="gradient" style="padding:5px; margin-top:5px; overflow:auto;">'
                            + ' <b>' + permissionText + '</b>'
                            + ' <div>'
                            +   '<input type="button" onclick="javascript: return onWaitPermissionOK(\'' + waitPermissionMessage.from.id + '\', \'' + waitPermissionMessage.id + '\')" style="margin-top:5px;" value="' + lang.allow + '" />'//Allow
                            +   '<input type="button" onclick="javascript: return onWaitPermissionDenie(\'' + waitPermissionMessage.from.id + '\', \'' + waitPermissionMessage.id + '\')" style="margin-top:5px;" value="' + lang.denie + '" />'//Denie
                            +   '<input type="button" onclick="javascript: return onWaitPermissionIgnore(\'' + waitPermissionMessage.from.id + '\', \'' + waitPermissionMessage.id + '\')" style="margin-top:5px;"'
                            +       ' value="' + lang.ignore + '"'//Ignore
                            +       ' title="' + ignoreTitle + '" />'
                            +   '<input type="button" onclick="javascript: return onWaitPermissionOKAll(\'' + waitPermissionMessage.from.id + '\', \'' + waitPermissionMessage.id + '\')" style="margin-top:5px;"'
                            +       ' value="' + lang.allowAll + '"'//Allow All
                            +       ' title="' + allowAllTitle + '" />'
                            +   '<input type="button" onclick="javascript: return onWaitPermissionDenieAll(\'' + waitPermissionMessage.from.id + '\', \'' + waitPermissionMessage.id + '\')" style="margin-top:5px;"'
                            +       ' value="' + lang.denyAll + '"'//Deny All
                            +       ' title="' + denyAllTitle + '" />'
                            + ' </div>'
                            + '</div>'
                        );
                        document.getElementById(permissionID).mediaName = mediaName;
                        document.getElementById('informerInvitations').querySelector('#user').appendChild(AddElementUser(waitPermissionMessage.from, g_chatRoom.RoomName));
                        invitationsCount();
                    }
                    beep("../MyIsapi/sounds/knockKnock.mp3");
                }

                chat.client.onWaitPermissionOK = function (toJSON)
                {
                    window.media.onWaitPermissionOK(toJSON);
                }
                
                chat.client.onWaitPermissionDenie = function (toJSON)
                {
                    window.media.onWaitPermissionDenie(toJSON);
                }

                chat.client.onWaitPermissionIgnore = function (toJSON)
                {
                    window.media.onWaitPermissionIgnore(toJSON);
                }
                
                chat.client.onInvite = function (invitationDataJSON)
                {
                    var invitationDataMessage = JSON.parse(invitationDataJSON);
                    var inviterName = invitationDataMessage.inviter.nickname;
                    var invitation = invitationDataMessage.invitationText;
                    consoleLog('chat.client.onInvite(from: "' + inviterName + '", to: "' + invitationDataMessage.room.RoomName + '" room, "' + invitation + '")');

                    var invitationText = invitation == "" ? " " : ': "' + invitation + '" ';
                    var inviterID = getInviterID(invitationDataMessage.inviter.id);

                    if(!document.getElementById(inviterID)){

                        //new invitation

                        document.getElementById("noInvitations").style.display = 'none';
                        document.getElementById("invitations").style.display = 'block';
                        onbranch('informerInvitations', 'branchInvitations', true);

                        $("#informerInvitations").append(
                            '<div id=' + inviterID + ' name="invitation" class="gradient" style="padding:5px; margin-top:5px; overflow:auto;">'
                            + ' <b>' + lang.invitation + '</b>'//Invitation
                            + ' <span id="invitationText' + invitationDataMessage.inviter.id + '"></span>'
                            + ' <b>' + lang.from + '</b> ' + inviterName
                            + ' <b>' + lang.to + '</b> ' + ' <span id="invitationToRoom' + invitationDataMessage.inviter.id + '"></span> <b>' + lang.room + '</b>'
                            + ' <b id="forPrivate' + invitationDataMessage.inviter.id + '"></b>'
                            + ' <div>'
                            + '     <input type="button" onclick="javascript: return onInvitationOK(\'' + invitationDataMessage.inviter.id + '\')" value="' + (isRussian() ? 'Принять' : 'Accept') + '" style="margin-top:5px;" />'
                            + '     <input type="button" onclick="javascript: return onInvitationReject(\'' + invitationDataMessage.inviter.id + '\')" value="' + (isRussian() ? 'Отклонить' : 'Reject') + '" style="margin-top:5px;" />'
                            + '     <input type="button" onclick="javascript: return onInvitationIgnore(\'' + invitationDataMessage.inviter.id + '\')"'
                                        + ' value="' + (isRussian() ? 'Игнорировать' : 'Ignore') + '" style="margin-top:5px;"'
                                        + ' title="' + (isRussian() ? 'Игнорировать все приглашения этого посетителя' : 'Ignore all invitation of this visitor') + '" />'
                            + ' </div>'
                            + '</div>'
                        );
                        invitationsCount();
                    }
                    document.getElementById("invitationText" + invitationDataMessage.inviter.id).innerHTML = invitationText;
                    document.getElementById("invitationToRoom" + invitationDataMessage.inviter.id).innerHTML = invitationDataMessage.room.RoomName;
                    document.getElementById("forPrivate" + invitationDataMessage.inviter.id).innerHTML = invitationDataMessage.room.Private ? lang.forPrivate : "";//'for a private conversation'
                    document.getElementById(inviterID).invitationDataMessage = invitationDataMessage;
                    beep("../MyIsapi/sounds/knockKnock.mp3");
                }
                
                chat.client.onInvitationStart = function (invitationDataJSON)
                {
                    var invitationDataMessage = JSON.parse(invitationDataJSON);
                    consoleLog('chat.client.onInvitationStart("' + invitationDataJSON + '")');
                    setInvitationResponse(invitationDataMessage, function(object){
                        object.innerHTML = getWaitIcon();
                    });
                }

                chat.client.onInviteOK = function (invitationDataJSON)
                {
                    var invitationDataMessage = JSON.parse(invitationDataJSON);
                    consoleLog('chat.client.onInviteOK("' + invitationDataMessage.inviter.nickname + '", "' + invitationDataMessage.invitationText + '")');
                    setInvitationResponse(invitationDataMessage, function(object){
                        AddSmile(object, '😀', lang.invitationAccepted);//'Your invitation has been accepted'
                    });
                    AddEventToChat(lang.hasAccepted, document.getElementById(invitationDataMessage.idAsk).user);//' has accepted your invitation.'
                }
                
                chat.client.onInviteReject = function (invitationDataJSON)
                {
                    var invitationDataMessage = JSON.parse(invitationDataJSON);
                    consoleLog('chat.client.onInviteReject("' + invitationDataMessage.inviter.nickname + '", "' + invitationDataMessage.invitationText + '")');
                    setInvitationResponse(invitationDataMessage, function(object){
                        AddSmile(object, '😕', lang.invitationRejected);//"Your invitation has been rejected"
                    });
                    AddEventToChat(lang.hasRejected, document.getElementById(invitationDataMessage.idAsk).user);//' has rejected your invitation.'
                }

                chat.client.onInviteIgnore = function (invitationDataJSON)
                {
                    var invitationDataMessage = JSON.parse(invitationDataJSON);
                    consoleLog('chat.client.onInviteIgnore("' + invitationDataMessage.inviter.nickname + '", "' + invitationDataMessage.invitationText + '")');
                    var idAsk = invitationDataMessage.idAsk;
                    var invitationResponse = getInvitationResponse(idAsk);
                    setInvitationResponse(invitationDataMessage, function(object, idAsk){
                        AddSmile(object, '😡', lang.inviteeNotAllow);//"The invitee does not allow to you to make a new invitations"
                        var roomName = object.parentElement.querySelector('#RoomName' + idAsk);
                        if(roomName)
                            roomName.disabled = true;
                        var goPrivate = object.parentElement.querySelector('#GoPrivate' + idAsk);
                        if(goPrivate)
                            goPrivate.disabled = true;
                    });
                    if(invitationResponse.id == "invitationResponse" + idAsk){
                        document.getElementById("inviteButton" + idAsk).disabled = true;
                        document.getElementById("invitationText" + idAsk).disabled = true;
                        return;
                    }
                    AddEventToChat(lang.hasIgnore, document.getElementById(invitationDataMessage.idAsk).user);//' does not allow to you to make a new invitations.'
                }

                chat.client.onRoomUsers = function (roomName, allUsers)
                {
                    consoleLog("chat.client.onRoomUsers(" + roomName + ", allUsers)");
                    AddAllUsers(allUsers, roomName);
                }

                //http://metanit.com/sharp/mvc5/16.2.php
                // Функция, вызываемая при подключении нового пользователя
                chat.client.onConnected = function (user, allUsers)
                {
                    var id = user.id;
                    var userName = user.nickname;
                    consoleLog("chat.client.onConnected(" + id + ", " + userName + ", allUsers)");
                    if(!userName){
                        var message = 'Unknown nickname';
                        consoleError(message);
                        alert(message);
                        return;
                    }
                    if (userName == g_user.nickname){
                        g_user.id = id;
                        g_user.browserID = user.browserID;
                        //SetCookie("browserID", g_user.browserID);
                        displayUsersCount(allUsers.length);
                    }
                    AddAllUsers(allUsers);
                }

                // Добавляем нового пользователя
                chat.client.onNewUserConnected = function (user, usersCount, ConnectionIDBefore, roomName)
                {
                    consoleLog("chat.client.onNewUserConnected(" + JSON.stringify(user) + ', ConnectionIDBefore: ' + ConnectionIDBefore + ", roomName: " + roomName + ")");
                    var elementUser = AddUser(user, ConnectionIDBefore, roomName);
                    if(!elementUser){
                        return;
                    }

                    if(roomName != g_chatRoom.RoomName)
                        return;

                    displayUsersCount(usersCount);

                    AddEventToChat(lang.userJoined, user, roomName);

                    function userInfo(parentID){
                        var informer = document.getElementById(parentID);
                        if(informer == null)
                            return;//нет включенных камер или микрофонов
                        var childNodes = informer.childNodes;
                        for(i = 0; i < childNodes.length; i++){
                            var node = childNodes[i];
                            if((typeof node.addMedia == 'undefined') || !node.addMedia.app.useLocalMedia)
                                continue;
                            $.connection.chatHub.server.userInfo(JSON.stringify(g_user), JSON.stringify(getMedias(node.addMedia.app.videoID)), roomName);
                            break;
                        }
                    }

                    //Cameras
                    userInfo("informerVideos");
                    //Microphones
                    userInfo("informerMicrophones");

                    //send files
                    function sendFilesInfo(parentID){
                        var fileTransfers = document.getElementsByName('fileTransfer');
/*
                        var arrayFileTransfers = [];
                        for(i = 0; i < fileTransfers.length; i++){
                            var fileTransfer = fileTransfers[i];
                            if(
                                (typeof fileTransfer.fileTransfer == 'undefined')
                                || (typeof fileTransfer.fileTransfer.sendFile == 'undefined')
                                || (
                                    (typeof fileTransfer.fileTransfer.loadedmetadata != 'undefined')//'это видеокамера
                                        && (fileTransfer.fileTransfer.loadedmetadata == false)//видеокамера еще не открылась
                                    )
                                )
                                continue;
                            fileTransfer.fileTransfer.sendFile(null, function(fileTransfer){
                                arrayFileTransfers.push({ fileTransfer: fileTransfer});
                            });
                        }
                        $.connection.chatHub.server.sendFileArray(JSON.stringify(g_user), JSON.stringify(arrayFileTransfers), g_chatRoom.RoomName);
*/
/*
                        for(i = 0; i < fileTransfers.length; i++){
                            var fileTransfer = fileTransfers[i];
                            if(
                                (typeof fileTransfer.fileTransfer == 'undefined')
                                || (typeof fileTransfer.fileTransfer.sendFile == 'undefined')
                                || (
                                    (typeof fileTransfer.fileTransfer.loadedmetadata != 'undefined')//'это видеокамера
                                     && (fileTransfer.fileTransfer.loadedmetadata == false)//видеокамера еще не открылась
                                    )
                                )
                                continue;
                            fileTransfer.fileTransfer.sendFile();
                        }
*/
                        // Не получается сразу отправить всем посетителям комнаты список медиа потоков и файлов
                        // потому что в этом случает функция chat.client.onSendFile будет вызываться несколько раз
                        // до того, как загрузится файл ReceiveFile.js
                        // В результате иногда на все потоки и файлы будут видны на принимающей строне. 
                        // Например это случается если очисть кеш и перезагрузить страницу на принимающей строне.
                        // Вместо этого вызываю sendFileRequest для всех посетителей комнаты кроме отправителя.
                        // по этому запросу у всех посетителей комнаты кроме отправитела вызывается chat.client.onSendFileRequest,
                        // которая загружает файл ReceiveFile.js и запрашивает список медиа потоков и файлов при помощи 
                        // $.connection.chatHub.server.sendFileStart(userID);
                        // и только после этого у отправителя вызывается chat.client.onSendFileStart
                        // в которой отправляется список медиа потоков и файлов персонально для каждого получателя
                        if(fileTransfers.length > 0)
                            $.connection.chatHub.server.sendFileRequest(g_user.id, user.id);//g_chatRoom.RoomName);
                }
                    sendFilesInfo('informerFileTransfers');
                }

                // Удаляем пользователя
                chat.client.onUserDisconnected = function (id, userName, usersCount, roomName) {
                    consoleLog("chat.client.onUserDisconnected(" + id + ", " + userName + ")");

                    displayUsersCount(usersCount);
                    var chatusers = document.getElementById('chatusers');
                    var arrayUsers = chatusers.childNodes;
                    for(i = 0; i < arrayUsers.length; i++){
                        var elementUser = arrayUsers[i];
                        if(elementUser.childNodes.length == 0){
                            consoleError('elementUser.childNodes.length = ' + elementUser.childNodes.length);
                            continue;
                        }
                        if(elementUser.childNodes[0].id == id){
                            chatusers.removeChild(elementUser);
                            break;
                        }
                    }
                    //Не удаляю приглашение потому что приглашений может быть несколько от одного и того же пользователя в разных комнатах
                    //и сюда попадет если пользователь вышел из одной из комнат.
                    //Но приглашение остается в силе потому что пользователь продолжает приглашать из другой комнаты
                    //для тестирования надо слелать приглашение в приват.
                    //Появится приватная комната и в ней будет еще одно прглашение
                    //Теперь выходим из первой комнаты
                    //removeInviter(id);

                    if(roomName == g_chatRoom.RoomName)
                        AddMessage("<em>" + lang.userLeft.replace("%s", userName) + "</em>");//'User %s has left the chat.'
                    if (typeof FileTransfer != 'undefined')
                        window.closeFileTransfer(id);
                    removeInviter(id);
                    removeWaitPermission(id, 1);//snapshot
                    removeWaitPermission(id, 2);//video record
                }

                chat.client.onRoomNameOk = function (roomName, userID) {
                    consoleLog("onRoomNameOk(" + roomName + ", " + userID + ")");
                    document.getElementById("RoomName" + userID).roomIsBusy = false;

                    //тут не получается открыть новую вкладку браузера
                    //window.open('?userId=' + g_user.id + '&chatRoom=' + roomName + '&private=jhgj', '_blank');
                    g_inputPrivateRoomName = null;
                }

                chat.client.onRoomNameBusy = function (userID) {
                    consoleLog("onRoomNameBusy(" + userID + ")");
                    document.getElementById("RoomName" + userID).roomIsBusy = true;
                    inputKeyFilter.TextAdd(lang.roomIsBusy, g_inputPrivateRoomName, "downarrowdivred");//room is busy
                    g_inputPrivateRoomName.focus();
                    g_inputPrivateRoomName = null;

                    var element = document.getElementById("invitationPrivateResponse" + userID);
                    if(element)
                        element.innerHTML = '';
                }

                chat.client.onNicknameBusy = function () {
                    alert(lang.nicknameBusy.replace("%s", g_user.nickname));//The %s nickname is busy
                    gotoChatPage();
                }

                chat.client.onDuplicateUserNameInRoom = function () {
                    var message = lang.duplicateUsernameInRoom.replace("%s", g_chatRoom.RoomName);//You are already in the "%s" room
                    //consoleLog(message);
                    alert(message);
                    gotoChatPage();
                }

                chat.client.onUpdatePrifile = function (user, nicknameOld) {
                    consoleLog("chat.client.onUpdatePrifile(" + JSON.stringify(user) + ")");
                    if(nicknameOld == g_user.nickname)
                    {
                        g_user.updateProfile(user);
                        document.getElementById(g_user.id).innerHTML = getUserString(g_user);
                        documentTitle();
                    } else{
                        var element = document.getElementById(user.id);
                        if(element){//user is exists in the current room
                            //consoleError("onUpdatePrifile(" + user + ") failed! user.id == g_user.id");
                            element.childNodes[1].innerHTML = user.nickname
                        } else {
//                            consoleError('chat.client.onUpdatePrifile(user) failed! document.getElementById("' + user.id + '") == null');
                            var arrayUserName = document.querySelectorAll('#userName');
                            for(var i = 0; i < arrayUserName.length; i++){
                                var userName = arrayUserName[i];
                                if(userName.innerHTML != nicknameOld)
                                    continue;
                                var elementUserName = userName.parentElement;
                                var elementUser = elementUserName.parentElement;
                                if(elementUser.tagName != 'B'){
                                    consoleError('elementUser.tagName: ' + elementUser.tagName);
                                    continue;
                                }
                                if (typeof elementUser.user != 'undefined'){
                                    if(elementUser.user.nickname != nicknameOld){
                                        consoleError('update of "' + nicknameOld + '" user failed! "' + elementUser.user.nickname + '" != "' + nicknameOld + '"');
                                    }
                                    elementUser.user.nickname = user.nickname;

                                    //update user
                                    elementUser.user = user;
                                }

                                //update users string
                                elementUserName.innerHTML = getUserString(user);

                                //update users window
                                var elementUsersWindow = elementUser.querySelector('.elementUser');
                                if(elementUsersWindow){
                                    var userInfo = elementUsersWindow.querySelector('#userInfo');
                                    var nextSibling = userInfo.nextElementSibling;
                                    var parentElement = userInfo.parentElement;
                                    parentElement.removeChild(userInfo);
                                    var elementUserInfo = document.createElement('span');
                                    elementUserInfo.id = 'userInfo';
                                    elementUserInfo.innerHTML = getUserInfo(elementUser);
                                    parentElement.insertBefore(elementUserInfo, nextSibling);
                                }
                            }
                        }
                    }
                    AddMessage("<em>" + lang.userUpdatePrifile.replace("%s", nicknameOld) + user.nickname + "</em>");//'User %s has updated profile. New name:'

                    //update user in all rooms
                    var roomsList = document.getElementById("roomsList");
                    for (var i = 0; i < roomsList.childNodes.length; i++) {
                        var elementRoomCur = roomsList.childNodes[i];
                        if (elementRoomCur.tagName == "DIV") {
                            for (var j = 0; j < elementRoomCur.childNodes.length; j++) {
                                var elementRoomChild = elementRoomCur.childNodes[j];//child elements of the room
                                if (elementRoomChild.tagName == "DIV") {
                                    var elementRoomChild0 = elementRoomChild.childNodes[0];
                                    for (var k = 0; k < elementRoomChild0.childNodes.length; k++) {
                                        var elementUsersList = elementRoomChild0.childNodes[k];
                                        if (elementUsersList.tagName == "DIV") {
                                            for (var l = 0; l < elementUsersList.childNodes.length; l++) {
                                                var elementUser = elementUsersList.childNodes[l];
                                                if (elementUser.tagName == "DIV") {
                                                    if(elementUser.userName == nicknameOld){
                                                        elementUser.userName = user.nickname;
                                                        elementUserChildNode0 = elementUser.childNodes[0];
                                                        if(typeof elementUserChildNode0 == 'undefined'){
                                                            consoleError('update of "' + nicknameOld + '" user in "' + elementRoomCur.childNodes[1].innerText + '" room failed! elementUserChildNode0 == "undefined"');
                                                            break;
                                                        }
                                                        var elementUserName;
                                                        if(elementUserChildNode0.tagName == "A"){//my profile
                                                            elementUserName = elementUserChildNode0;
                                                        } else {
                                                            elementUserName = elementUserChildNode0.childNodes[1];
                                                            if(elementUserName.className != "pointer"){
                                                                consoleError('update of "' + nicknameOld + '" user in "' + elementRoomCur.childNodes[1].innerText + '" room failed! elementUserName.className == "' + elementUserName.className + '"');
                                                                break;
                                                            }
                                                        }
                                                        //if(elementUserName.innerText != nicknameOld)do not support in Firefox
                                                        if(elementUserName.innerHTML != nicknameOld)
                                                        {
                                                            consoleError('update of "' + nicknameOld + '" user in "' + elementRoomCur.childNodes[1].innerText + '" room failed! elementUserName.innerText == "' + elementUserName.innerText + '"');
                                                            break;
                                                        }
                                                        elementUserName.innerHTML = user.nickname;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                chat.client.onNickname = function (nickname) {
                    consoleLog("chat.client.onNickname(" + nickname + ")");
                    g_user.nickname = nickname;
                    if(!g_user.nickname){
                        var user;
                        if (navigator.cookieEnabled)
                            user = get_cookie("User");
                        else user = new QueryString().value('user');
                        g_user.nickname = JSON.parse(user).nickname;
//                        g_user.nickname = JSON.parse(new QueryString().value('user')).nickname;
                        if(!g_user.nickname){
                            consoleError('chat.client.onNickname("' + nickname + '"). Invalid nickname');
                            gotoChatPage();
                            return;
                        }
                    }
                    documentTitle();
                }

                //открыть свойства пользователя, для которого была открыта приватная комната
                chat.client.onUsersRoom = function (roomName, connectionID) {
                    consoleLog("onUsersRoom(" + roomName + ", " + connectionID + ")");
                    g_chatRoom.privateRoomName = roomName;
                    onclickRooms();
                    var roomsList = document.getElementById("roomsList");
                    for (var i = 0; i < roomsList.childNodes.length; i++) {
                        var elementRoomCur = roomsList.childNodes[i];
                        if (elementRoomCur.tagName == "DIV") {
                            if (getItemRoomName(elementRoomCur) == roomName) {
                                openRoomBranch(elementRoomCur.childNodes[1])
                                break;
                            }
                        }
                    }
                }

                chat.client.onAccessDenied = function () {
                    consoleLog('chat.client.onAccessDenied()');
                    alert(lang.accessDenied.replace('%s', g_chatRoom.RoomName));//You do not have access into "%s" private room
                    gotoChatPage();
                }

                chat.client.onError = function (error) {
                    ErrorMessage('SignalR onError: ' + error);
                }

                chat.client.onUserNotExists = function (){
                    alert(lang.userNotExists.replace("%s", ''));//The visitor %s does not exist
                }

                chat.client.onUserExistsInRoom = function (nickname, roomName) {
                    alert(lang.userExistsInRoom.replace("%s2", roomName).replace("%s", nickname));//The visitor %s is exists in the %s2 room
                }

                //http://www.asp.net/signalr/overview/guide-to-the-api/hubs-api-guide-javascript-client#connectionlifetime
                //SignalR provides the following connection lifetime events that you can handle:
                $.connection.hub.starting(function () {
                    consoleLog('SignalR starting: Raised before any data is sent over the connection.');
                });
                $.connection.hub.received(function () {
                    //consoleLog('SignalR received: Raised when any data is received on the connection. Provides the received data.');
                });
                $.connection.hub.connectionSlow(function () {
                    consoleLog('SignalR connectionSlow: We are currently experiencing difficulties with the connection.');
                });
                $.connection.hub.reconnecting(function () {
                    consoleLog('SignalR reconnecting: Raised when the underlying transport begins reconnecting.');
                    beep();
                    /*
                    //Не могу обратно восстановить список посетителей после воссоединения с сервером. Почему то с сервера не вызывавются функции
                    //Clients.Caller.onConnected(newUser, roomUsers);
                    //Clients.All.onNewUserConnected(newUser, roomUsers.Count, ConnectionIDBefore, room.RoomName);

                    //Remove all users
                    //http://forum.vingrad.ru/forum/topic-263388.html
                    var el = document.getElementById("chatusers");
                    while (el.childNodes[0]) {
                        el.removeChild(el.childNodes[0]);
                    }
                    */
                    disable(true);
                });
                $.connection.hub.reconnected(function () {
                    consoleLog('SignalR reconnected: Raised when the underlying transport has reconnected. User: ' + JSON.stringify(g_user) + '. Room: ' + JSON.stringify(g_chatRoom));
                    var server = $.connection.chatHub.server;

                    //Не могу обратно восстановить список посетителей после воссоединения с сервером. Почему то с сервера не вызывавются функции
                    //Clients.Caller.onConnected(newUser, roomUsers);
                    //Clients.All.onNewUserConnected(newUser, roomUsers.Count, ConnectionIDBefore, room.RoomName);
                    //Поэтому в $.connection.hub.reconnecting не удаляю список посетителей


//                    server.updateUser(g_user.id, g_user.nickname);
//                    server.updateUser(JSON.stringify(g_user));

                    //http://metanit.com/sharp/mvc5/16.2.php
                    // обработка логина
//                    chat.server.connect(JSON.stringify(g_user), JSON.stringify(g_chatRoom));

                    disable(false);
                });
                $.connection.hub.stateChanged(function (state) {
                    //http://stackoverflow.com/questions/9334838/signalr-detect-connection-state-on-client
                    var stateConversion = { 0: 'connecting', 1: 'connected', 2: 'reconnecting', 4: 'disconnected' };
                    consoleLog('SignalR state changed from: ' + stateConversion[state.oldState]
                     + ' to: ' + stateConversion[state.newState]);

                    function stateMessage(state) {
                        var message = "";
                        switch (state) {
                            case 0://connecting
                                message = (isRussian() ? "Соединение" : "Сonnecting") + "...";
                                break;
                            case 1://connected
                                message = "";
                                break;
                            case 2://reconnecting
                                message = '<img src="../img/Wait.gif" style="width:20px; height:20px;" alt="wait" />  ' +
                                    (isRussian() ? "Восстановление соединения" : "Reconnecting") + "...";
                                break;
                            case 4://disconnected
                                message = (isRussian() ? "Потеря соединения" : "Disconnected")
                                    + "... <input type='button' value='" + (isRussian() ? "Cоедениться снова" : "Connect again") + "' onclick='javascript: return onConnectAgain()' />";
                                break;
                            default:
                                ErrorMessage("Unknown SignalR state: " + state);
                                return;
                        }
                        MessageElement(message);
                        onresize();//for compatibility with IE5
                    }
                    stateMessage(state.newState);
                });
                $.connection.hub.disconnected(function () {
                    consoleLog('SignalR disconnected: Raised when the connection has disconnected.');
                });
                $.connection.hub.error(function (error) {
                    consoleError('SignalR error: ' + error)
                });

                //To enable client-side logging on a connection,
                //set the logging property on the connection object before you call the start method to establish the connection.
                //$.connection.hub.logging = true;

                // Start the connection.
                $.connection.hub.start().done(function () {
                    $('#send').click(function () {
                        onClickSend();
                    });

                    if(!init())
                        return;

                    if(g_user.browserID == ""){
                        //alert('$.connection.hub.start().done failed! g_user.browserID == ""');
                        gotoChatPage();
                        return;
                    }
                    //http://metanit.com/sharp/mvc5/16.2.php
                    // обработка логина
                    g_user.browser = DetectRTC.browser;
                    g_user.isMobileDevice = DetectRTC.isMobileDevice;
                    g_user.os = {
                        name: DetectRTC.osName
                        , version: DetectRTC.osVersion
                    };
                    chat.server.connect(JSON.stringify(g_user), JSON.stringify(g_chatRoom));
                });
            } catch (e) {
                ErrorMessage(e.message);
            }
        });

        function AddEventToChat(event, user, roomName) {
            AddMessageToChat(lang.user//'User '
                , user, event, roomName);
        }
        
        function AddMessageToChat(message, user, event, roomName) {
            var element = document.createElement("em");
            element.name="message";
            element.appendChild(document.createTextNode(message));
            element.appendChild(AddElementUser(user, roomName));
            element.appendChild(document.createTextNode(event));
            var elementUser = document.createElement("div");
            elementUser.appendChild(element);
            AddElement(elementUser);
        }
        
        var g_elementExpandedClass;

        function displayUsersCount(usersCount) { document.getElementById("usersCount").innerHTML = usersCount; }

        function getInviterID(id){ return 'inviter' + id;}
        function getWaitPermissionSnapshotID(id){ return id + 'WaitPermissionSnapshot';}
        function getWaitPermissionVideoID(id){ return id + 'WaitPermissionVideo';}
        function getWaitPermissionMicrophoneID(id){ return id + 'WaitPermissionMicrophone';}

        function invitationsCount(){
            var invitationsCount = document.getElementsByName("invitation").length + document.getElementsByName("waitPermission").length;
            document.getElementById("invitationsCount").innerHTML = invitationsCount;
            return invitationsCount;
        }

        function removeInvitations(id){
            if(invitationsCount() == 0){
                //consoleLog("invitationsCount = 0");
                document.getElementById("invitations").style.display = "none";
            }
        }

        function removeInviter(id){
            $('#' + getInviterID(id)).remove();
            removeInvitations(id);
        }

        function removeWaitPermission(id, waitPermissionId){
            switch(parseInt(waitPermissionId)){
                case 1://Snapshot
                    $('#' + getWaitPermissionSnapshotID(id)).remove();
                    break;
                case 2://camera record
                    $('#' + getWaitPermissionVideoID(id)).remove();
                    break;
                case 3://microphone record
                    $('#' + getWaitPermissionMicrophoneID(id)).remove();
                    break;
                default:
                    consoleError('removeWaitPermission(' + id + ', ' + waitPermissionId + ') failed!');
            }
            removeInvitations(id);
        }

        //http://metanit.com/sharp/mvc5/16.2.php
        //Добавление нового пользователя
        function AddUser(newUser, ConnectionIDBefore, roomName)
        {
            var id = newUser.id;
            var name = newUser.nickname;
            if((typeof id == 'undefined') || (typeof name == 'undefined')){
                consoleError('AddUser(' + id + ', "' + name + '") failed');
                return null;
            }

            var roomId;
            if((typeof roomName == 'undefined') || (roomName == null) || (roomName == g_chatRoom.RoomName))
                roomId = "chatusers";
            else roomId = "Users" + roomName;
            var chatusers = document.getElementById(roomId);
            if(!chatusers)
                return null;

            var elementBefore = null;
            if(ConnectionIDBefore != ''){
                elementBefore = document.getElementById('chatusers').querySelector('#' + CSSescape(ConnectionIDBefore));
                if(elementBefore)
                    elementBefore = elementBefore.parentElement;
            }

            var myAccount = document.getElementById(id);
            if (myAccount) {
                if (id != g_user.id)
                    consoleError('Duplicate user id = ' + id);
                //Если не передвигать мой аккаунт, то может получиться не правильная сортировака посеителей
                //когда новый посетитель по алфавиту должен быть вставлен перед моим аккаунтом
                myAccount = myAccount.parentElement;
                if(elementBefore)
                    chatusers.insertBefore(myAccount, elementBefore);
                else chatusers.appendChild(myAccount);//move my account to the end of the users list
                return null;
            }

            for(var i = 0; i < chatusers.childNodes.length; i++){
                if(chatusers.childNodes[i].userName == name) {
                    consoleError('Duplicate user: "' + name + "'");
                    return null;
                }
            }

            var user = document.createElement("div");
            user.userName = newUser.nickname;//name;
            var elementUser = AddElementUser(newUser, roomName, true);
            user.appendChild(elementUser);
            if(elementBefore)
                chatusers.insertBefore(user, elementBefore);
            else chatusers.appendChild(user);

            if((g_chatRoom.privateRoomName == roomName) && (g_chatRoom.privateUserId == newUser.id)){
                consoleLog("privateRoomName: " + roomName + ", private userName: " + name);
                usersWindow(elementUser, true);
            }

            return elementUser;
        }

        function invitation(idAsk, room, invitationText) {
            var invitationDataMessage = new Object()
            invitationDataMessage.idAsk = idAsk;//ID of user for invitation
            if(typeof invitationText == 'undefined')
                invitationDataMessage.invitationText = "";
            else invitationDataMessage.invitationText = invitationText;
            invitationDataMessage.inviter = g_user;
            invitationDataMessage.room = room;
            consoleLog('invitation(' + idAsk + ', "' + invitationDataMessage.invitationText + '") to ' + room.RoomName + ' room. PrivateID = ' + room.PrivateID);
            $.connection.chatHub.server.invitation(JSON.stringify(invitationDataMessage));
        }

        function onInvitation(idAsk, userName) {
            var elementChatusers = document.getElementById("chatusers");
            for(var i=0; i<elementChatusers.childNodes.length; i++){
                if(elementChatusers.childNodes[i].userName == userName){
                    inputKeyFilter.TextAdd(
                        lang.duplicateOtherUserInRoom.replace("%s2", g_chatRoom.RoomName).replace("%s", userName)//'The %s visitor already in the "%s2" room'
                        , document.getElementById('inviteButton' + idAsk));
                    return;
                }
            }
            invitation(idAsk, g_chatRoom, document.getElementById("invitationText" + idAsk).value);
        }
        
        function onInvitationOK(inviterID) {
            consoleLog("onInvitationOK(" + inviterID + ")");
            var invitationDataMessage = document.getElementById(getInviterID(inviterID)).invitationDataMessage;
            $.connection.chatHub.server.invitationOK(JSON.stringify(invitationDataMessage));
            removeInviter(inviterID);
            var privateID = '';
            if (typeof invitationDataMessage.room.PrivateID != 'undefined')
                privateID = '&privateID=' + invitationDataMessage.room.PrivateID;
            window.open('?browserID=' + g_user.browserID + '&chatRoom=' + invitationDataMessage.room.RoomName + privateID, '_blank');
        }
        
        function onInvitationReject(inviterID) {
            consoleLog("onInvitationReject(" + inviterID + ")");
            $.connection.chatHub.server.invitationReject(JSON.stringify(document.getElementById(getInviterID(inviterID)).invitationDataMessage));
            removeInviter(inviterID);
        }
        
        function onInvitationIgnore(inviterID) {
            consoleLog("onInvitationIgnore(" + inviterID + ")");
            $.connection.chatHub.server.invitationIgnore(JSON.stringify(document.getElementById(getInviterID(inviterID)).invitationDataMessage));
            removeInviter(inviterID);
        }

        function JSONWaitPermission(waitPermissionID){
            return JSON.stringify({toID:g_user.id,waitPermissionId:waitPermissionID});
        }

        function onWaitPermissionOK(fromID, waitPermissionId) {
            consoleLog('onWaitPermissionOK(' + fromID + ', ' + waitPermissionId + ')');
            $.connection.chatHub.server.waitPermissionOK(fromID, JSONWaitPermission(waitPermissionId));
            removeWaitPermission(fromID, waitPermissionId);
        }

        function onWaitPermissionDenie(fromID, waitPermissionId) {
            consoleLog("onWaitPermissionDenie(" + fromID + ", " + waitPermissionId + ")");
            $.connection.chatHub.server.waitPermissionDenie(fromID, JSONWaitPermission(waitPermissionId));
            removeWaitPermission(fromID, waitPermissionId);
        }
        
        function onWaitPermissionIgnore(fromID, waitPermissionId) {
            consoleLog("onWaitPermissionIgnore(" + fromID + ")");
            $.connection.chatHub.server.waitPermissionIgnore(fromID, JSONWaitPermission(waitPermissionId));
            removeWaitPermission(fromID, waitPermissionId);
        }

        function onbranchFast(informerId, branchId) {
            onbranchelementFast(document.getElementById(informerId), branchId);
        }

        function onbranchelementFast(informer, branchId) {
            consoleLog("onbranchelementFast(" + informer.id + ', ' + branchId + ")");
            var branch = document.getElementById(branchId);
            if(informer.style.display == 'none')
            {
                informer.style.display = 'block';
                if(branch)
                    branch.innerHTML = "▼"<!-- http://htmlbook.ru/samhtml/tekst/spetssimvoly http://unicode-table.com/ru/#box-drawing -->
                return;
            }
            informer.style.display = 'none';
            if(branch)
                branch.innerHTML = "▶"<!-- http://htmlbook.ru/samhtml/tekst/spetssimvoly http://unicode-table.com/ru/#box-drawing -->
            return;
        };
        function onclickUser(id) {
            return onbranch('informer' + id, 'branchUser' + id);
        };

        function onConnectAgain() {
            //consoleLog("onConnectAgain()");
            location.reload();
        }
        function disable(isDisable) {
            document.getElementById("editor").disabled = isDisable;
            document.getElementById("send").disabled = isDisable;
            if (!isDisable)
                $('#editor').focus();
        }
        function onclickFileTransfers() {
            return onbranchFast('informerFileTransfers', 'branchFileTransfers');
        };
        function onclickCameraTransfers() {
            onbranchFast('informerCameraTransfers', 'branchCameraTransfers');
            window.resizeVideos();//если не вызвать эту функцию, то медиа элемент не будет виден если в панели посетителей закрыть ветку с медиаэлементами (видеокамеры, микрофоны) и добвить свой медиа элемент
        };
        function onclickMicrophoneTransfers() {
            onbranchFast('informerMicrophoneTransfers', 'branchMicrophoneTransfers');
            window.resizeVideos();//если не вызвать эту функцию, то медиа элемент не будет виден если в панели посетителей закрыть ветку с медиаэлементами (видеокамеры, микрофоны) и добвить свой медиа элемент
        };
        function init() {
            //consoleLog("init()");

            document.getElementById("roomsHeader").innerHTML = lang.rooms;//Rooms
            document.getElementById("usersHeader").innerHTML = lang.users + ':';//Users

            //menu
            document.getElementById("menuUsers").innerHTML = '☰ ' + lang.menu;//Menu
            document.getElementById("sendFileText").innerHTML = lang.sendFile;//Send File
            document.getElementById("sendFilePictureText").innerHTML = lang.sendPicture;//Send Picture
            document.getElementById("sendFileVideoText").innerHTML = lang.sendVideo;//Send Video
            document.getElementById("sendFileAudioText").innerHTML = lang.sendAudio;//Send Audio
            document.getElementById("sendExitText").innerHTML = lang.exit;//Exit
            
            //video cameras list
            var videosHeader = document.getElementById("videosHeader");
            if(videosHeader){
                videosHeader.innerHTML = lang.videos;//Videocameras
                videosHeader.title = lang.videosTitle;//List of video broadcasts
                document.getElementById("noVideos").innerHTML = lang.noVideos;//No video broadcasts
            }

            //Microphone list
            var microphoneHeader = document.getElementById("microphoneHeader");
            microphoneHeader.innerHTML = lang.microphones;//Microphones
            microphoneHeader.title = lang.microphonesTitle;//List of microphone broadcasts
            document.getElementById("noMicrophones").innerHTML = lang.noMicrophones;//No microphone broadcasts
/*
            //File Transfer list
            var fileTransferHeader = document.getElementById("fileTransferHeader");
            fileTransferHeader.innerHTML = lang.fileTransfers;//Files
            fileTransferHeader.title = lang.fileTransfersTitle;//File transfers list
            document.getElementById("noFileTransfer").innerHTML = lang.noFileTransfer;//No file transfer
*/
            var usersWidth = get_cookie ("usersWidth");
            if (typeof usersWidth != 'undefined')
                document.getElementById("users").style.width = usersWidth;

            var isPrompt = false;

            //http://unixpapa.com/js/querystring.html
            var q= new QueryString();
            g_user.query();
            var privateUserId =  q.value("private");
            g_chatRoom.PrivateID = q.value("privateID");
            if(g_chatRoom.PrivateID == 'undefined'){
                consoleError('init() failed! g_chatRoom.PrivateID = ' + g_chatRoom.PrivateID);
                alert(lang.invalidParameter.replace('%s', g_chatRoom.PrivateID));//Invalid privateID : "%s" parameter
                return false;
            }
            if(typeof privateUserId != 'undefined'){
                if(typeof g_chatRoom.PrivateID == 'undefined'){
                    consoleError('init() failed! g_chatRoom.PrivateID is undefined');
                    return false;
                }
                g_chatRoom.Private = true;
                g_chatRoom.privateUserId = privateUserId;
                $.connection.chatHub.server.getUsersRoom(privateUserId);//открыть свойства пользователя, для которого была открыта приватная комната
                //                onbranch('roomsList', 'branchRooms');
            } else {
            }
            g_chatRoom.RoomName =  q.value("chatRoom");
            if(!g_chatRoom.RoomName || (g_chatRoom.RoomName.replace(/^\s+/, "") == "")){
                alert(lang.chatRoomError);//The name of the chat room is not defined
                gotoChatPage();
                return false;
            }

            if (typeof g_user.browserID == 'undefined'){
                if(!g_user.nickname || (g_user.nickname.replace(/^\s+/, "") == "")){
                    alert(lang.nicknameError);//The nickname is not defined
                    gotoChatPage();
                    return false;
                }
            } else {
                $.connection.chatHub.server.getNickname(g_user.browserID);
            }

            initSample();//ckeditor http://ckeditor.com/

            return true;
        }

        //Do not works in Firefox
        function onbeforeunload() {

            consoleLog('onbeforeunload(event)');

            /*не работает
            //http://stackoverflow.com/questions/18457797/how-to-know-whether-refresh-button-or-browser-back-button-is-clicked-in-firefox
            if(window.event){
                if (window.event.clientX < 40 && window.event.clientY < 0) { 
                    consoleLog("back button is clicked");    
                }else{
                    consoleLog("refresh button is clicked");
                }
            }else{
                if (event.currentTarget.performance.navigation.type == 2) { 
                    consoleLog("back button is clicked2");    
                }
                if (event.currentTarget.performance.navigation.type == 1){
                    consoleLog("refresh button is clicked2");
                }             
            }
            */
            if(!isIE && document.getElementById('messages').childNodes.length == 0)
                return null;
            return lang.onunload;//'All chat content will be lost forever.'
        }

        function documentTitle() {
            var chatRoom = g_chatRoom.RoomName;
            if((typeof g_chatRoom.PrivateID != 'undefined') && (g_chatRoom.PrivateID != ""))
                chatRoom = chatRoom + " " + lang.strPrivate;//private
            var title = document.getElementById("title");
            title.innerHTML = chatRoom + " - ";// + ' - <a href="../chat/?Nickname=' + encodeURIComponent(g_user.nickname)
            title.appendChild(createElementMyUser());
            document.title = (boBodyFocus ? "" : "*") + chatRoom + ' - ' + g_user.nickname ;
        }
        ////////////////////////////////////////////////
        //ckeditor http://sdk.ckeditor.com/samples/api.html
        function InsertHTML(value) {
            // Get the editor instance that you want to interact with.
            var editor = CKEDITOR.instances.editor;

            // Check the active editing mode.
            if ( editor.mode == 'wysiwyg' )
            {
                // Insert HTML code.
                // http://docs.ckeditor.com/#!/api/CKEDITOR.editor-method-insertHtml
                editor.insertHtml( value );
            }
            else
                alert( 'You must be in WYSIWYG mode!' );
        }

        function InsertText(value) {
            // Get the editor instance that you want to interact with.
            var editor = CKEDITOR.instances.ckeditor;

            // Check the active editing mode.
            if ( editor.mode == 'wysiwyg' )
            {
                // Insert as plain text.
                // http://docs.ckeditor.com/#!/api/CKEDITOR.editor-method-insertText
                editor.insertText( value );
            }
            else
                alert( 'You must be in WYSIWYG mode!' );
        }
        //ckeditor http://sdk.ckeditor.com/samples/api.html
        ////////////////////////////////////////////////

        //boBodyFocus = false if document is not visible.
        //The document is not visible when the user minimizes the webpage or moves to another tab.
        //Add * into document's title if it is not visible (boBodyFocus = false).
        //Play sound if document is not visible (boBodyFocus = false) and new message has arrived from server.
        //http://stackoverflow.com/questions/19519535/detect-if-browser-tab-is-active-or-user-has-switched-away/19519701#19519701
        //Do not works in Safari 5.1
        var vis = (function(){
            var stateKey, eventKey, keys = {
                hidden: "visibilitychange",
                webkitHidden: "webkitvisibilitychange",
                mozHidden: "mozvisibilitychange",
                msHidden: "msvisibilitychange"
            };
            for (stateKey in keys) {
                if (stateKey in document) {
                    eventKey = keys[stateKey];
                    break;
                }
            }
            return function(c) {
                if (c){
                    if (typeof eventKey === "undefined")
                        consoleError("The page's visibility detection failed! eventKey === 'undefined'");
                    else document.addEventListener(eventKey, c);
                }
                return !document[stateKey];
            }
        })();

        vis(function(){
            boBodyFocus = vis();
            //consoleLog(boBodyFocus ? 'Page visible' : 'Page not visible');
            //            document.title = vis() ? 'Visible' : 'Not visible';
            if(boBodyFocus)
                documentTitle();
        });

        function onclickInvitations(id) {
            return onbranch('informerInvitations', 'branchInvitations');
        };
    </script>
</body>
</html>